{"ast":null,"code":"var _jsxFileName = \"D:\\\\PeoplePixel1\\\\src\\\\IndividualContact.js\",\n  _s = $RefreshSig$();\n// //src/IndividualContacts.js\n// import React, { useState, useEffect } from 'react';\n// import { useLocation, Link } from 'react-router-dom';\n// import axios from 'axios';\n// import './styles.css';\n// import { FaCheckSquare, FaBell, FaMoneyBillWave, FaPlusCircle } from 'react-icons/fa';\n\n// import Contacts from './Contacts';\n\n// const IndividualContact = () => {\n//   const location = useLocation();\n//   const params = new URLSearchParams(location.search);\n//   const name = params.get('name'); // Get the contact name from URL\n//   const avatar = params.get('avatar'); // Get the contact avatar URL or ID\n\n//   const [activeTab, setActiveTab] = useState('todo'); // State to track active tab\n\n//   const [todos, setTodos] = useState([]); // State for todos (fetched from the backend)\n\n//   useEffect(() => {\n//     const fetchTodos = async () => {\n//       try {\n//         const contactId = params.get('contactId');\n//         const response = await axios.get(`http://localhost:5000/api/contacts/${contactId}/todos`);\n//         setTodos(response.data);\n//       } catch (error) {\n//         console.error('Error fetching todos:', error);\n//       }\n//     };\n//     fetchTodos();\n//   }, [params.get('contactId')]);\n\n//   const addTodo = async (newTodoText) => {\n//     try {\n//       const contactId = params.get('contactId');\n//       const newTodo = { text: newTodoText, completed: false, contactId };\n//       const response = await axios.post(`http://localhost:5000/api/contacts/${contactId}/todos`, newTodo);\n//       setTodos([...todos, response.data]);\n//     } catch (error) {\n//       console.error('Error adding todo in contact:', error);\n//     }\n//   };\n\n//   // Handle toggling todo completion\n//   const toggleTodo = async (todoId) => {\n//     try {\n//       const updatedTodo = todos.find(todo => todo._id === todoId);\n//       updatedTodo.completed = !updatedTodo.completed;\n//       const response = await axios.put(`http://localhost:5000/api/todos/${todoId}`, updatedTodo);\n//       setTodos(todos.map(todo => (todo._id === todoId ? response.data : todo)));\n//     } catch (error) {\n//       console.error('Error toggling todo completion:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"individual-contact\">\n//       <header className=\"header\">\n//         <button className=\"back-button\" onClick={() => window.history.back()}>← Contacts</button>\n//       </header>\n\n//       <div className=\"contact-summary\">\n//         <div className=\"contact-photo\">\n//           <img src={avatar || '/default-avatar.jpg'} alt={`${name}'s avatar`} />\n//         </div>\n//         <h2>{name || \"Contact\"}</h2>\n//       </div>\n\n//       <div className=\"tab-bar\">\n//         <button\n//           className={`tab ${activeTab === 'todo' ? 'active' : ''}`}\n//           onClick={() => setActiveTab('todo')}\n//         >\n//           <FaCheckSquare className=\"icon\" /> Todo\n//         </button>\n//         <button\n//           className={`tab ${activeTab === 'reminder' ? 'active' : ''}`}\n//           onClick={() => setActiveTab('reminder')}\n//         >\n//           <FaBell className=\"icon\" /> Reminder\n//         </button>\n//         <button\n//           className={`tab ${activeTab === 'finance' ? 'active' : ''}`}\n//           onClick={() => setActiveTab('finance')}\n//         >\n//           <FaMoneyBillWave className=\"icon\" /> Finance\n//         </button>\n//       </div>\n\n//       <div className=\"tab-content\">\n//         {activeTab === 'todo' && (\n//           <div className=\"todo-content\">\n//             <div className=\"todo-header\">\n//               <button\n//                 className=\"add-button\"\n//                 onClick={() => {\n//                   const newTodoText = prompt('Enter new todo:');\n//                   if (newTodoText) addTodo(newTodoText);\n//                 }}\n//               >\n//                 <FaPlusCircle className=\"icon\" /> Add New Todo\n//               </button>\n//             </div>\n//             <div className=\"todo-list\">\n//               {todos.length === 0 ? (\n//                 <p>No todos found</p>\n//               ) : (\n//                 todos.map(todo => (\n//                   <div key={todo._id} className={`list-item ${todo.completed ? 'completed' : ''}`}>\n//                     <input\n//                       type=\"checkbox\"\n//                       checked={todo.completed}\n//                       onChange={() => toggleTodo(todo._id)}\n//                     />\n//                     <span>{todo.text}</span>\n//                   </div>\n//                 ))\n//               )}\n//             </div>\n//           </div>\n//         )}\n\n//         {activeTab === 'reminder' && (\n//           <div className=\"reminder-content\">\n//             <button className=\"add-button\">+ Add New Reminder</button>\n//           </div>\n//         )}\n\n//         {activeTab === 'finance' && (\n//           <div className=\"finance-content\">\n//             <button className=\"add-button\">+ Add New Transaction</button>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default IndividualContact;\n\n// import React, { useState, useEffect } from 'react';\n// import { useLocation } from 'react-router-dom';\n// import { fetchTodos, addTodo, toggleTodo } from './api';\n// import './styles.css';\n// import { FaCheckSquare, FaBell, FaMoneyBillWave, FaPlusCircle } from 'react-icons/fa';\n\n// const IndividualContact = () => {\n//   const location = useLocation();\n//   const params = new URLSearchParams(location.search);\n//   const name = params.get('name');\n//   const avatar = params.get('avatar');\n//   const contactId = params.get('contactId');\n\n//   const [activeTab, setActiveTab] = useState('todo');\n//   const [todos, setTodos] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   // Fetch todos when component mounts or contactId changes\n//   useEffect(() => {\n//     const loadTodos = async () => {\n//       if (!contactId) {\n//         setError('No contact ID provided');\n//         setLoading(false);\n//         return;\n//       }\n\n//       try {\n//         setLoading(true);\n//         const todoData = await fetchTodos(contactId);\n//         setTodos(todoData);\n//         setError(null);\n//       } catch (err) {\n//         setError('Failed to load todos: ' + err.message);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     loadTodos();\n//   }, [contactId]);\n\n//   // Handle adding a new todo\n//   const handleAddTodo = async (todoText) => {\n//     if (!contactId || !todoText.trim()) return;\n\n//     try {\n//       const newTodo = {\n//         text: todoText,\n//         completed: false,\n//         priority: 'Medium'\n//       };\n\n//       const addedTodo = await addTodo(contactId, newTodo);\n//       setTodos(prevTodos => [...prevTodos, addedTodo]);\n//       console.log('error');\n//     } catch (err) {\n//       setError('Failed to add todo: ' + err.message);\n//     }\n//   };\n\n//   // Handle toggling todo completion\n//   const handleToggleTodo = async (todoId, completed) => {\n//     try {\n//       const updatedTodo = await toggleTodo(todoId, !completed);\n//       setTodos(prevTodos =>\n//         prevTodos.map(todo =>\n//           todo._id === todoId ? updatedTodo : todo\n//         )\n//       );\n//     } catch (err) {\n//       setError('Failed to update todo: ' + err.message);\n//     }\n//   };\n\n//   return (\n//     <div className=\"individual-contact\">\n//       <header className=\"header\">\n//         <button className=\"back-button\" onClick={() => window.history.back()}>← Contacts</button>\n//       </header>\n\n//       <div className=\"contact-summary\">\n//         <div className=\"contact-photo\">\n//           <img src={avatar || '/default-avatar.jpg'} alt={`${name}'s avatar`} />\n//         </div>\n//         <h2>{name || \"Contact\"}</h2>\n//       </div>\n\n//       <div className=\"tab-bar\">\n//         <button\n//           className={`tab ${activeTab === 'todo' ? 'active' : ''}`}\n//           onClick={() => setActiveTab('todo')}\n//         >\n//           <FaCheckSquare className=\"icon\" /> Todo\n//         </button>\n//         <button\n//           className={`tab ${activeTab === 'reminder' ? 'active' : ''}`}\n//           onClick={() => setActiveTab('reminder')}\n//         >\n//           <FaBell className=\"icon\" /> Reminder\n//         </button>\n//         <button\n//           className={`tab ${activeTab === 'finance' ? 'active' : ''}`}\n//           onClick={() => setActiveTab('finance')}\n//         >\n//           <FaMoneyBillWave className=\"icon\" /> Finance\n//         </button>\n//       </div>\n\n//       <div className=\"tab-content\">\n//         {activeTab === 'todo' && (\n//           <div className=\"todo-content\">\n//             {error && <div className=\"error-message\">{error}</div>}\n\n//             <div className=\"todo-header\">\n//               <button\n//                 className=\"add-button\"\n//                 onClick={() => {\n//                   const newTodoText = prompt('Enter new todo:');\n//                   if (newTodoText) handleAddTodo(newTodoText);\n//                 }}\n//               >\n//                 <FaPlusCircle className=\"icon\" /> Add New Todo\n//               </button>\n//             </div>\n\n//             <div className=\"todo-list\">\n//               {loading ? (\n//                 <p>Loading todos...</p>\n//               ) : todos.length === 0 ? (\n//                 <p>No todos found</p>\n//               ) : (\n//                 todos.map(todo => (\n//                   <div key={todo._id} className={`list-item ${todo.completed ? 'completed' : ''}`}>\n//                     <input\n//                       type=\"checkbox\"\n//                       checked={todo.completed}\n//                       onChange={() => handleToggleTodo(todo._id, todo.completed)}\n//                     />\n//                     <span>{todo.text}</span>\n//                   </div>\n//                 ))\n//               )}\n//             </div>\n//           </div>\n//         )}\n\n//         {activeTab === 'reminder' && (\n//           <div className=\"reminder-content\">\n//             <button className=\"add-button\">+ Add New Reminder</button>\n//           </div>\n//         )}\n\n//         {activeTab === 'finance' && (\n//           <div className=\"finance-content\">\n//             <button className=\"add-button\">+ Add New Transaction</button>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default IndividualContact;\n\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { fetchTodos, addTodo, toggleTodo } from './api';\nimport './styles.css';\nimport { FaCheckSquare, FaBell, FaMoneyBillWave, FaPlusCircle } from 'react-icons/fa';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IndividualContact = () => {\n  _s();\n  const location = useLocation();\n  const params = new URLSearchParams(location.search);\n  const name = params.get('name');\n  const avatar = params.get('avatar');\n  const contactId = params.get('contactId');\n  const [activeTab, setActiveTab] = useState('todo');\n  const [todos, setTodos] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  console.log('Current contactId:', contactId); // Debug log\n\n  useEffect(() => {\n    const loadTodos = async () => {\n      if (!contactId) {\n        setError('No contact ID provided');\n        setLoading(false);\n        return;\n      }\n      try {\n        setLoading(true);\n        const todoData = await fetchTodos(contactId);\n        console.log('Fetched todos:', todoData); // Debug log\n        setTodos(todoData);\n        setError(null);\n      } catch (err) {\n        console.error('Error loading todos:', err); // Debug log\n        setError('Failed to load todos: ' + err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadTodos();\n  }, [contactId]);\n  const handleAddTodo = async todoText => {\n    if (!contactId) {\n      setError('No contact ID provided');\n      return;\n    }\n    if (!todoText.trim()) {\n      setError('Todo text cannot be empty');\n      return;\n    }\n    try {\n      console.log('Adding todo for contact:', contactId); // Debug log\n\n      const newTodo = {\n        text: todoText.trim(),\n        completed: false,\n        priority: 'Medium'\n      };\n      console.log('New todo data:', newTodo); // Debug log\n\n      setLoading(true);\n      const addedTodo = await addTodo(contactId, newTodo);\n      console.log('Successfully added todo:', addedTodo); // Debug log\n\n      setTodos(prevTodos => [...prevTodos, addedTodo]);\n      setError(null);\n    } catch (err) {\n      console.error('Error in handleAddTodo:', err); // Debug log\n      setError('Failed to add todo: ' + err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"individual-contact\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: activeTab === 'todo' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todo-content\",\n        children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          style: {\n            color: 'red',\n            padding: '10px'\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"todo-header\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"add-button\",\n            onClick: () => {\n              const newTodoText = prompt('Enter new todo:');\n              if (newTodoText) {\n                console.log('Attempting to add todo:', newTodoText); // Debug log\n                handleAddTodo(newTodoText);\n              }\n            },\n            children: [/*#__PURE__*/_jsxDEV(FaPlusCircle, {\n              className: \"icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 429,\n              columnNumber: 17\n            }, this), \" Add New Todo\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"todo-list\",\n          children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 17\n          }, this) : todos.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No todos found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 17\n          }, this) : todos.map(todo => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `list-item ${todo.completed ? 'completed' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: todo.completed,\n              onChange: () => handleToggleTodo(todo._id, todo.completed)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: todo.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 21\n            }, this)]\n          }, todo._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 406,\n    columnNumber: 5\n  }, this);\n};\n_s(IndividualContact, \"VGZ629pYFsq8TwCuzGPZUKEeLvQ=\", false, function () {\n  return [useLocation];\n});\n_c = IndividualContact;\nexport default IndividualContact;\nvar _c;\n$RefreshReg$(_c, \"IndividualContact\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","fetchTodos","addTodo","toggleTodo","FaCheckSquare","FaBell","FaMoneyBillWave","FaPlusCircle","jsxDEV","_jsxDEV","IndividualContact","_s","location","params","URLSearchParams","search","name","get","avatar","contactId","activeTab","setActiveTab","todos","setTodos","loading","setLoading","error","setError","console","log","loadTodos","todoData","err","message","handleAddTodo","todoText","trim","newTodo","text","completed","priority","addedTodo","prevTodos","className","children","style","color","padding","fileName","_jsxFileName","lineNumber","columnNumber","onClick","newTodoText","prompt","length","map","todo","type","checked","onChange","handleToggleTodo","_id","_c","$RefreshReg$"],"sources":["D:/PeoplePixel1/src/IndividualContact.js"],"sourcesContent":["// //src/IndividualContacts.js\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useLocation, Link } from 'react-router-dom';\r\n// import axios from 'axios';\r\n// import './styles.css';\r\n// import { FaCheckSquare, FaBell, FaMoneyBillWave, FaPlusCircle } from 'react-icons/fa';\r\n\r\n// import Contacts from './Contacts';\r\n\r\n// const IndividualContact = () => {\r\n//   const location = useLocation();\r\n//   const params = new URLSearchParams(location.search);\r\n//   const name = params.get('name'); // Get the contact name from URL\r\n//   const avatar = params.get('avatar'); // Get the contact avatar URL or ID\r\n\r\n//   const [activeTab, setActiveTab] = useState('todo'); // State to track active tab\r\n  \r\n\r\n//   const [todos, setTodos] = useState([]); // State for todos (fetched from the backend)\r\n\r\n//   useEffect(() => {\r\n//     const fetchTodos = async () => {\r\n//       try {\r\n//         const contactId = params.get('contactId');\r\n//         const response = await axios.get(`http://localhost:5000/api/contacts/${contactId}/todos`);\r\n//         setTodos(response.data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching todos:', error);\r\n//       }\r\n//     };\r\n//     fetchTodos();\r\n//   }, [params.get('contactId')]);\r\n  \r\n//   const addTodo = async (newTodoText) => {\r\n//     try {\r\n//       const contactId = params.get('contactId');\r\n//       const newTodo = { text: newTodoText, completed: false, contactId };\r\n//       const response = await axios.post(`http://localhost:5000/api/contacts/${contactId}/todos`, newTodo);\r\n//       setTodos([...todos, response.data]);\r\n//     } catch (error) {\r\n//       console.error('Error adding todo in contact:', error);\r\n//     }\r\n//   };\r\n  \r\n\r\n//   // Handle toggling todo completion\r\n//   const toggleTodo = async (todoId) => {\r\n//     try {\r\n//       const updatedTodo = todos.find(todo => todo._id === todoId);\r\n//       updatedTodo.completed = !updatedTodo.completed;\r\n//       const response = await axios.put(`http://localhost:5000/api/todos/${todoId}`, updatedTodo);\r\n//       setTodos(todos.map(todo => (todo._id === todoId ? response.data : todo)));\r\n//     } catch (error) {\r\n//       console.error('Error toggling todo completion:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"individual-contact\">\r\n//       <header className=\"header\">\r\n//         <button className=\"back-button\" onClick={() => window.history.back()}>← Contacts</button>\r\n//       </header>\r\n\r\n//       <div className=\"contact-summary\">\r\n//         <div className=\"contact-photo\">\r\n//           <img src={avatar || '/default-avatar.jpg'} alt={`${name}'s avatar`} />\r\n//         </div>\r\n//         <h2>{name || \"Contact\"}</h2>\r\n//       </div>\r\n\r\n//       <div className=\"tab-bar\">\r\n//         <button\r\n//           className={`tab ${activeTab === 'todo' ? 'active' : ''}`}\r\n//           onClick={() => setActiveTab('todo')}\r\n//         >\r\n//           <FaCheckSquare className=\"icon\" /> Todo\r\n//         </button>\r\n//         <button\r\n//           className={`tab ${activeTab === 'reminder' ? 'active' : ''}`}\r\n//           onClick={() => setActiveTab('reminder')}\r\n//         >\r\n//           <FaBell className=\"icon\" /> Reminder\r\n//         </button>\r\n//         <button\r\n//           className={`tab ${activeTab === 'finance' ? 'active' : ''}`}\r\n//           onClick={() => setActiveTab('finance')}\r\n//         >\r\n//           <FaMoneyBillWave className=\"icon\" /> Finance\r\n//         </button>\r\n//       </div>\r\n\r\n//       <div className=\"tab-content\">\r\n//         {activeTab === 'todo' && (\r\n//           <div className=\"todo-content\">\r\n//             <div className=\"todo-header\">\r\n//               <button\r\n//                 className=\"add-button\"\r\n//                 onClick={() => {\r\n//                   const newTodoText = prompt('Enter new todo:');\r\n//                   if (newTodoText) addTodo(newTodoText);\r\n//                 }}\r\n//               >\r\n//                 <FaPlusCircle className=\"icon\" /> Add New Todo\r\n//               </button>\r\n//             </div>\r\n//             <div className=\"todo-list\">\r\n//               {todos.length === 0 ? (\r\n//                 <p>No todos found</p>\r\n//               ) : (\r\n//                 todos.map(todo => (\r\n//                   <div key={todo._id} className={`list-item ${todo.completed ? 'completed' : ''}`}>\r\n//                     <input\r\n//                       type=\"checkbox\"\r\n//                       checked={todo.completed}\r\n//                       onChange={() => toggleTodo(todo._id)}\r\n//                     />\r\n//                     <span>{todo.text}</span>\r\n//                   </div>\r\n//                 ))\r\n//               )}\r\n//             </div>\r\n//           </div>\r\n//         )}\r\n\r\n//         {activeTab === 'reminder' && (\r\n//           <div className=\"reminder-content\">\r\n//             <button className=\"add-button\">+ Add New Reminder</button>\r\n//           </div>\r\n//         )}\r\n\r\n//         {activeTab === 'finance' && (\r\n//           <div className=\"finance-content\">\r\n//             <button className=\"add-button\">+ Add New Transaction</button>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default IndividualContact;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useLocation } from 'react-router-dom';\r\n// import { fetchTodos, addTodo, toggleTodo } from './api';\r\n// import './styles.css';\r\n// import { FaCheckSquare, FaBell, FaMoneyBillWave, FaPlusCircle } from 'react-icons/fa';\r\n\r\n// const IndividualContact = () => {\r\n//   const location = useLocation();\r\n//   const params = new URLSearchParams(location.search);\r\n//   const name = params.get('name');\r\n//   const avatar = params.get('avatar');\r\n//   const contactId = params.get('contactId');\r\n\r\n//   const [activeTab, setActiveTab] = useState('todo');\r\n//   const [todos, setTodos] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   // Fetch todos when component mounts or contactId changes\r\n//   useEffect(() => {\r\n//     const loadTodos = async () => {\r\n//       if (!contactId) {\r\n//         setError('No contact ID provided');\r\n//         setLoading(false);\r\n//         return;\r\n//       }\r\n\r\n//       try {\r\n//         setLoading(true);\r\n//         const todoData = await fetchTodos(contactId);\r\n//         setTodos(todoData);\r\n//         setError(null);\r\n//       } catch (err) {\r\n//         setError('Failed to load todos: ' + err.message);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     loadTodos();\r\n//   }, [contactId]);\r\n\r\n//   // Handle adding a new todo\r\n//   const handleAddTodo = async (todoText) => {\r\n//     if (!contactId || !todoText.trim()) return;\r\n\r\n//     try {\r\n//       const newTodo = {\r\n//         text: todoText,\r\n//         completed: false,\r\n//         priority: 'Medium'\r\n//       };\r\n\r\n//       const addedTodo = await addTodo(contactId, newTodo);\r\n//       setTodos(prevTodos => [...prevTodos, addedTodo]);\r\n//       console.log('error');\r\n//     } catch (err) {\r\n//       setError('Failed to add todo: ' + err.message);\r\n//     }\r\n//   };\r\n\r\n//   // Handle toggling todo completion\r\n//   const handleToggleTodo = async (todoId, completed) => {\r\n//     try {\r\n//       const updatedTodo = await toggleTodo(todoId, !completed);\r\n//       setTodos(prevTodos =>\r\n//         prevTodos.map(todo =>\r\n//           todo._id === todoId ? updatedTodo : todo\r\n//         )\r\n//       );\r\n//     } catch (err) {\r\n//       setError('Failed to update todo: ' + err.message);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"individual-contact\">\r\n//       <header className=\"header\">\r\n//         <button className=\"back-button\" onClick={() => window.history.back()}>← Contacts</button>\r\n//       </header>\r\n\r\n//       <div className=\"contact-summary\">\r\n//         <div className=\"contact-photo\">\r\n//           <img src={avatar || '/default-avatar.jpg'} alt={`${name}'s avatar`} />\r\n//         </div>\r\n//         <h2>{name || \"Contact\"}</h2>\r\n//       </div>\r\n\r\n//       <div className=\"tab-bar\">\r\n//         <button\r\n//           className={`tab ${activeTab === 'todo' ? 'active' : ''}`}\r\n//           onClick={() => setActiveTab('todo')}\r\n//         >\r\n//           <FaCheckSquare className=\"icon\" /> Todo\r\n//         </button>\r\n//         <button\r\n//           className={`tab ${activeTab === 'reminder' ? 'active' : ''}`}\r\n//           onClick={() => setActiveTab('reminder')}\r\n//         >\r\n//           <FaBell className=\"icon\" /> Reminder\r\n//         </button>\r\n//         <button\r\n//           className={`tab ${activeTab === 'finance' ? 'active' : ''}`}\r\n//           onClick={() => setActiveTab('finance')}\r\n//         >\r\n//           <FaMoneyBillWave className=\"icon\" /> Finance\r\n//         </button>\r\n//       </div>\r\n\r\n//       <div className=\"tab-content\">\r\n//         {activeTab === 'todo' && (\r\n//           <div className=\"todo-content\">\r\n//             {error && <div className=\"error-message\">{error}</div>}\r\n            \r\n//             <div className=\"todo-header\">\r\n//               <button\r\n//                 className=\"add-button\"\r\n//                 onClick={() => {\r\n//                   const newTodoText = prompt('Enter new todo:');\r\n//                   if (newTodoText) handleAddTodo(newTodoText);\r\n//                 }}\r\n//               >\r\n//                 <FaPlusCircle className=\"icon\" /> Add New Todo\r\n//               </button>\r\n//             </div>\r\n\r\n//             <div className=\"todo-list\">\r\n//               {loading ? (\r\n//                 <p>Loading todos...</p>\r\n//               ) : todos.length === 0 ? (\r\n//                 <p>No todos found</p>\r\n//               ) : (\r\n//                 todos.map(todo => (\r\n//                   <div key={todo._id} className={`list-item ${todo.completed ? 'completed' : ''}`}>\r\n//                     <input\r\n//                       type=\"checkbox\"\r\n//                       checked={todo.completed}\r\n//                       onChange={() => handleToggleTodo(todo._id, todo.completed)}\r\n//                     />\r\n//                     <span>{todo.text}</span>\r\n//                   </div>\r\n//                 ))\r\n//               )}\r\n//             </div>\r\n//           </div>\r\n//         )}\r\n\r\n//         {activeTab === 'reminder' && (\r\n//           <div className=\"reminder-content\">\r\n//             <button className=\"add-button\">+ Add New Reminder</button>\r\n//           </div>\r\n//         )}\r\n\r\n//         {activeTab === 'finance' && (\r\n//           <div className=\"finance-content\">\r\n//             <button className=\"add-button\">+ Add New Transaction</button>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default IndividualContact;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { fetchTodos, addTodo, toggleTodo } from './api';\r\nimport './styles.css';\r\nimport { FaCheckSquare, FaBell, FaMoneyBillWave, FaPlusCircle } from 'react-icons/fa';\r\n\r\nconst IndividualContact = () => {\r\n  const location = useLocation();\r\n  const params = new URLSearchParams(location.search);\r\n  const name = params.get('name');\r\n  const avatar = params.get('avatar');\r\n  const contactId = params.get('contactId');\r\n\r\n  const [activeTab, setActiveTab] = useState('todo');\r\n  const [todos, setTodos] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  console.log('Current contactId:', contactId); // Debug log\r\n\r\n  useEffect(() => {\r\n    const loadTodos = async () => {\r\n      if (!contactId) {\r\n        setError('No contact ID provided');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        setLoading(true);\r\n        const todoData = await fetchTodos(contactId);\r\n        console.log('Fetched todos:', todoData); // Debug log\r\n        setTodos(todoData);\r\n        setError(null);\r\n      } catch (err) {\r\n        console.error('Error loading todos:', err); // Debug log\r\n        setError('Failed to load todos: ' + err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadTodos();\r\n  }, [contactId]);\r\n\r\n  const handleAddTodo = async (todoText) => {\r\n    if (!contactId) {\r\n      setError('No contact ID provided');\r\n      return;\r\n    }\r\n\r\n    if (!todoText.trim()) {\r\n      setError('Todo text cannot be empty');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      console.log('Adding todo for contact:', contactId); // Debug log\r\n      \r\n      const newTodo = {\r\n        text: todoText.trim(),\r\n        completed: false,\r\n        priority: 'Medium'\r\n      };\r\n\r\n      console.log('New todo data:', newTodo); // Debug log\r\n\r\n      setLoading(true);\r\n      const addedTodo = await addTodo(contactId, newTodo);\r\n      console.log('Successfully added todo:', addedTodo); // Debug log\r\n      \r\n      setTodos(prevTodos => [...prevTodos, addedTodo]);\r\n      setError(null);\r\n    } catch (err) {\r\n      console.error('Error in handleAddTodo:', err); // Debug log\r\n      setError('Failed to add todo: ' + err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"individual-contact\">\r\n      {/* ... header and contact summary ... */}\r\n\r\n      <div className=\"tab-content\">\r\n        {activeTab === 'todo' && (\r\n          <div className=\"todo-content\">\r\n            {error && (\r\n              <div className=\"error-message\" style={{ color: 'red', padding: '10px' }}>\r\n                {error}\r\n              </div>\r\n            )}\r\n            \r\n            <div className=\"todo-header\">\r\n              <button\r\n                className=\"add-button\"\r\n                onClick={() => {\r\n                  const newTodoText = prompt('Enter new todo:');\r\n                  if (newTodoText) {\r\n                    console.log('Attempting to add todo:', newTodoText); // Debug log\r\n                    handleAddTodo(newTodoText);\r\n                  }\r\n                }}\r\n              >\r\n                <FaPlusCircle className=\"icon\" /> Add New Todo\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"todo-list\">\r\n              {loading ? (\r\n                <p>Loading...</p>\r\n              ) : todos.length === 0 ? (\r\n                <p>No todos found</p>\r\n              ) : (\r\n                todos.map(todo => (\r\n                  <div key={todo._id} className={`list-item ${todo.completed ? 'completed' : ''}`}>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={todo.completed}\r\n                      onChange={() => handleToggleTodo(todo._id, todo.completed)}\r\n                    />\r\n                    <span>{todo.text}</span>\r\n                  </div>\r\n                ))\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* ... other tabs ... */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IndividualContact;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AASA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}