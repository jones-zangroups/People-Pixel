{"ast":null,"code":"var _jsxFileName = \"D:\\\\PeoplePixel1\\\\src\\\\IndividualContact.js\",\n  _s = $RefreshSig$();\n// // src/IndividualContact.js\n// import React, { useState } from 'react';\n// import { useLocation, Link } from 'react-router-dom';\n// import './styles.css';\n// import { FaCheckSquare, FaBell, FaMoneyBillWave } from 'react-icons/fa';\n// import Contacts from './Contacts';\n\n// const IndividualContact = () => {\n//   const location = useLocation();\n//   const params = new URLSearchParams(location.search);\n//   const name = params.get('name'); // Get the contact name from URL\n//   const avatar = params.get('avatar'); // Get the contact avatar\n\n//   const [activeTab, setActiveTab] = useState('todo'); // State to track active tab\n//   const [todos, setTodos] = useState([{ text: \"Complete Today's Task\" }, { text: \"Schedule meeting\" }]); // Sample todo data\n//   const [reminders, setReminders] = useState([]); // Sample reminder data\n//   const [transactions, setTransactions] = useState([]); // Sample transaction data\n\n//   return (\n//     <div className=\"individual-contact\">\n//       <header className=\"header\">\n//         {/* <button className=\"back-button\">← Contacts</button> */}\n//         <button className=\"back-button\" onClick={() => window.history.back()}>← Contacts</button>\n\n//         {/* <h1 className=\"title\">Contact</h1> */}\n//       </header>\n//       <div className=\"contact-summary\">\n//         <div className=\"contact-photo\">\n//           <i className=\"bi bi-person-circle\"></i>\n//         </div>\n//         <h2>{name || \"Contact\"}</h2>\n//       </div>\n//       <div className=\"tab-bar\">\n//         <button\n//           className={`tab ${activeTab === 'todo' ? 'active' : ''}`}\n//           onClick={() => setActiveTab('todo')}\n//         >\n//           <FaCheckSquare className=\"icon\" /> Todo\n//         </button>\n//         <button\n//           className={`tab ${activeTab === 'reminder' ? 'active' : ''}`}\n//           onClick={() => setActiveTab('reminder')}\n//         >\n//           <FaBell className=\"icon\" /> Reminder\n//         </button>\n//         <button\n//           className={`tab ${activeTab === 'finance' ? 'active' : ''}`}\n//           onClick={() => setActiveTab('finance')}\n//         >\n//           <FaMoneyBillWave className=\"icon\" /> Finance\n//         </button>\n//       </div>\n//       <div className=\"tab-content\">\n//         {activeTab === 'todo' && (\n//           <div className=\"todo-content\">\n//             {todos.map((todo, index) => (\n//               <div key={index} className=\"list-item\">\n//                 <span>{todo.text}</span>\n//                 <FaCheckSquare className=\"status-icon\" />\n//               </div>\n//             ))}\n//             <button className=\"add-button\">+ Add New Todo</button>\n//           </div>\n//         )}\n//         {activeTab === 'reminder' && (\n//           <div className=\"reminder-content\">\n//             <button className=\"add-button\">+ Add New Reminder</button>\n//           </div>\n//         )}\n//         {activeTab === 'finance' && (\n//           <div className=\"finance-content\">\n//             <button className=\"add-button\">+ Add New Transaction</button>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default IndividualContact;\n\n// // src/IndividualContact.js\n// import React, { useEffect, useState } from 'react';\n// import { useLocation, useNavigate } from 'react-router-dom';\n// import './styles.css';\n// import { FaCheckSquare, FaBell, FaMoneyBillWave } from 'react-icons/fa';\n// // import { getContactById, updateContact, deleteContact } from '../api';\n// import { getContactById, updateContact, deleteContact } from './api'; // relative to src/\n\n// const IndividualContact = () => {\n//   const location = useLocation();\n//   const navigate = useNavigate();\n//   const params = new URLSearchParams(location.search);\n//   const contactId = params.get('id'); // Assuming ID is passed in URL as 'id'\n\n//   const [contact, setContact] = useState(null);\n//   const [activeTab, setActiveTab] = useState('todo');\n//   const [todos, setTodos] = useState([]);\n//   const [reminders, setReminders] = useState([]);\n//   const [transactions, setTransactions] = useState([]);\n\n//   useEffect(() => {\n//     // Fetch the contact data by ID\n//     const fetchContact = async () => {\n//       try {\n//         const data = await getContactById(contactId);\n//         setContact(data);\n//         setTodos(data.todos || []);\n//         setReminders(data.reminders || []);\n//         setTransactions(data.transactions || []);\n//       } catch (error) {\n//         console.error('Error fetching contact data:', error);\n//       }\n//     };\n//     fetchContact();\n//   }, [contactId]);\n\n//   const handleAddTodo = () => {\n//     const newTodo = prompt('Enter new todo:');\n//     if (newTodo) {\n//       const updatedTodos = [...todos, { text: newTodo }];\n//       setTodos(updatedTodos);\n//       updateContact(contactId, { ...contact, todos: updatedTodos });\n//     }\n//   };\n\n//   const handleAddReminder = () => {\n//     const newReminder = prompt('Enter new reminder:');\n//     if (newReminder) {\n//       const updatedReminders = [...reminders, { text: newReminder }];\n//       setReminders(updatedReminders);\n//       updateContact(contactId, { ...contact, reminders: updatedReminders });\n//     }\n//   };\n\n//   const handleAddTransaction = () => {\n//     const newTransaction = prompt('Enter new transaction:');\n//     if (newTransaction) {\n//       const updatedTransactions = [...transactions, { text: newTransaction }];\n//       setTransactions(updatedTransactions);\n//       updateContact(contactId, { ...contact, transactions: updatedTransactions });\n//     }\n//   };\n\n//   return (\n//     <div className=\"individual-contact\">\n//       <header className=\"header\">\n//         <button className=\"back-button\" onClick={() => navigate(-1)}>← Contacts</button>\n//       </header>\n\n//       <div className=\"contact-summary\">\n//         <div className=\"contact-photo\">\n//           {contact ? contact.avatar : <i className=\"bi bi-person-circle\"></i>}\n//         </div>\n//         <h2>{contact ? contact.name : \"Contact\"}</h2>\n//       </div>\n\n//       <div className=\"tab-bar\">\n//         <button\n//           className={`tab ${activeTab === 'todo' ? 'active' : ''}`}\n//           onClick={() => setActiveTab('todo')}\n//         >\n//           <FaCheckSquare className=\"icon\" /> Todo\n//         </button>\n//         <button\n//           className={`tab ${activeTab === 'reminder' ? 'active' : ''}`}\n//           onClick={() => setActiveTab('reminder')}\n//         >\n//           <FaBell className=\"icon\" /> Reminder\n//         </button>\n//         <button\n//           className={`tab ${activeTab === 'finance' ? 'active' : ''}`}\n//           onClick={() => setActiveTab('finance')}\n//         >\n//           <FaMoneyBillWave className=\"icon\" /> Finance\n//         </button>\n//       </div>\n\n//       <div className=\"tab-content\">\n//         {activeTab === 'todo' && (\n//           <div className=\"todo-content\">\n//             {todos.map((todo, index) => (\n//               <div key={index} className=\"list-item\">\n//                 <span>{todo.text}</span>\n//                 <FaCheckSquare className=\"status-icon\" />\n//               </div>\n//             ))}\n//             <button className=\"add-button\" onClick={handleAddTodo}>+ Add New Todo</button>\n//           </div>\n//         )}\n//         {activeTab === 'reminder' && (\n//           <div className=\"reminder-content\">\n//             {reminders.map((reminder, index) => (\n//               <div key={index} className=\"list-item\">\n//                 <span>{reminder.text}</span>\n//                 <FaBell className=\"status-icon\" />\n//               </div>\n//             ))}\n//             <button className=\"add-button\" onClick={handleAddReminder}>+ Add New Reminder</button>\n//           </div>\n//         )}\n//         {activeTab === 'finance' && (\n//           <div className=\"finance-content\">\n//             {transactions.map((transaction, index) => (\n//               <div key={index} className=\"list-item\">\n//                 <span>{transaction.text}</span>\n//                 <FaMoneyBillWave className=\"status-icon\" />\n//               </div>\n//             ))}\n//             <button className=\"add-button\" onClick={handleAddTransaction}>+ Add New Transaction</button>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default IndividualContact;\n\n// // src/IndividualContact.js\n// import React, { useState, useEffect } from 'react';\n// import { useLocation, Link } from 'react-router-dom';\n// import axios from 'axios';\n// import './styles.css';\n// import { FaCheckSquare, FaBell, FaMoneyBillWave } from 'react-icons/fa';\n\n// const API_URL = 'http://localhost:5000/api'; // Backend API URL\n\n// const IndividualContact = () => {\n//   const location = useLocation();\n//   const params = new URLSearchParams(location.search);\n//   const contactId = params.get('id'); // Get the contact ID from URL\n//   const name = params.get('name'); // Get the contact name\n//   const avatar = params.get('avatar'); // Get the contact avatar\n\n//   // State management\n//   const [activeTab, setActiveTab] = useState('todo');\n//   const [todos, setTodos] = useState([]);\n//   const [reminders, setReminders] = useState([]);\n//   const [transactions, setTransactions] = useState([]);\n\n//   // Fetch data for todos, reminders, and transactions\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const todosRes = await axios.get(`${API_URL}/contacts/${contactId}/todos`);\n//         setTodos(todosRes.data);\n\n//         const remindersRes = await axios.get(`${API_URL}/contacts/${contactId}/reminders`);\n//         setReminders(remindersRes.data);\n\n//         const transactionsRes = await axios.get(`${API_URL}/contacts/${contactId}/finance`);\n//         setTransactions(transactionsRes.data);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       }\n//     };\n//     fetchData();\n//   }, [contactId]);\n\n//   // Add Todo\n//   const addTodo = async (todoData) => {\n//     try {\n//       const response = await axios.post(`${API_URL}/contacts/${contactId}/todos`, todoData);\n//       setTodos([...todos, response.data]);\n//     } catch (error) {\n//       console.error('Error adding todo:', error);\n//     }\n//   };\n\n//   // Edit Todo\n//   const editTodo = async (todoId, updatedTodoData) => {\n//     try {\n//       const response = await axios.put(`${API_URL}/contacts/${contactId}/todos/${todoId}`, updatedTodoData);\n//       const updatedTodos = todos.map(todo =>\n//         todo._id === todoId ? { ...todo, ...updatedTodoData } : todo\n//       );\n//       setTodos(updatedTodos);\n//     } catch (error) {\n//       console.error('Error editing todo:', error);\n//     }\n//   };\n\n//   // Delete Todo\n//   const deleteTodo = async (todoId) => {\n//     try {\n//       await axios.delete(`${API_URL}/contacts/${contactId}/todos/${todoId}`);\n//       setTodos(todos.filter(todo => todo._id !== todoId));\n//     } catch (error) {\n//       console.error('Error deleting todo:', error);\n//     }\n//   };\n\n//   // Mark Todo as Complete\n//   const toggleTodoComplete = async (todoId) => {\n//     try {\n//       const todoToUpdate = todos.find(todo => todo._id === todoId);\n//       const updatedTodo = { ...todoToUpdate, completed: !todoToUpdate.completed };\n//       await axios.put(`${API_URL}/contacts/${contactId}/todos/${todoId}`, updatedTodo);\n//       setTodos(todos.map(todo => (todo._id === todoId ? updatedTodo : todo)));\n//     } catch (error) {\n//       console.error('Error toggling todo complete:', error);\n//     }\n//   };\n\n//   // Add Reminder\n//   const addReminder = async (reminderData) => {\n//     try {\n//       const response = await axios.post(`${API_URL}/contacts/${contactId}/reminders`, reminderData);\n//       setReminders([...reminders, response.data]);\n//     } catch (error) {\n//       console.error('Error adding reminder:', error);\n//     }\n//   };\n\n//   // Add Finance Transaction\n//   const addTransaction = async (transactionData) => {\n//     try {\n//       const response = await axios.post(`${API_URL}/contacts/${contactId}/finance`, transactionData);\n//       setTransactions([...transactions, response.data]);\n//     } catch (error) {\n//       console.error('Error adding transaction:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"individual-contact\">\n//       <header className=\"header\">\n//         <button className=\"back-button\" onClick={() => window.history.back()}>← Contacts</button>\n//       </header>\n//       <div className=\"contact-summary\">\n//         <div className=\"contact-photo\">\n//           <i className=\"bi bi-person-circle\"></i>\n//         </div>\n//         <h2>{name || \"Contact\"}</h2>\n//       </div>\n\n//       <div className=\"tab-bar\">\n//         <button className={`tab ${activeTab === 'todo' ? 'active' : ''}`} onClick={() => setActiveTab('todo')}>\n//           <FaCheckSquare className=\"icon\" /> Todo\n//         </button>\n//         <button className={`tab ${activeTab === 'reminder' ? 'active' : ''}`} onClick={() => setActiveTab('reminder')}>\n//           <FaBell className=\"icon\" /> Reminder\n//         </button>\n//         <button className={`tab ${activeTab === 'finance' ? 'active' : ''}`} onClick={() => setActiveTab('finance')}>\n//           <FaMoneyBillWave className=\"icon\" /> Finance\n//         </button>\n//       </div>\n\n//       <div className=\"tab-content\">\n//         {activeTab === 'todo' && (\n//           <div className=\"todo-content\">\n//             {todos.map((todo) => (\n//               <div key={todo._id} className=\"list-item\">\n//                 <span>{todo.text}</span>\n//                 <button onClick={() => toggleTodoComplete(todo._id)}>{todo.completed ? 'Unmark' : 'Complete'}</button>\n//                 <button onClick={() => deleteTodo(todo._id)}>Delete</button>\n//               </div>\n//             ))}\n//             <button className=\"add-button\" onClick={() => addTodo({ text: 'New Todo', completed: false })}>+ Add New Todo</button>\n//           </div>\n//         )}\n\n//         {activeTab === 'reminder' && (\n//           <div className=\"reminder-content\">\n//             <button className=\"add-button\" onClick={() => addReminder({ text: 'New Reminder' })}>+ Add New Reminder</button>\n//           </div>\n//         )}\n\n//         {activeTab === 'finance' && (\n//           <div className=\"finance-content\">\n//             <button className=\"add-button\" onClick={() => addTransaction({ amount: 100, category: 'expense' })}>+ Add New Transaction</button>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default IndividualContact;\n\n// src/IndividualContact.js\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport './styles.css';\nimport { FaCheckSquare, FaBell, FaMoneyBillWave } from 'react-icons/fa';\n\n// Helper function to fetch the contact data by ID\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchContact = async id => {\n  const response = await axios.get(`/api/contacts/${id}`);\n  return response.data;\n};\nconst IndividualContact = () => {\n  _s();\n  const location = useLocation();\n  const {\n    id\n  } = useParams(); // Contact ID from URL\n  const [contact, setContact] = useState(null); // Initialize contact as null\n  const [activeTab, setActiveTab] = useState('todo'); // State to track active tab\n\n  const [newTodo, setNewTodo] = useState({\n    text: '',\n    dueDate: '',\n    priority: 'Medium'\n  });\n  const [newReminder, setNewReminder] = useState({\n    text: '',\n    date: '',\n    recurring: false\n  });\n  const [newTransaction, setNewTransaction] = useState({\n    amount: '',\n    description: '',\n    category: 'Expense',\n    date: ''\n  });\n  const [sortedTodos, setSortedTodos] = useState([]);\n  const [filter, setFilter] = useState('All'); // Filter for todos\n\n  // Fetch the contact data when component loads\n  useEffect(() => {\n    fetchContact(id).then(setContact);\n  }, [id]);\n\n  // Check if contact is available before attempting to access its properties\n  if (!contact) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 12\n    }, this); // Display loading message while contact data is being fetched\n  }\n\n  // Handle Todo actions\n  const handleAddTodo = async () => {\n    const {\n      text,\n      dueDate,\n      priority\n    } = newTodo;\n    if (!text || !dueDate) return;\n    const response = await axios.post(`/api/contacts/${id}/todos`, {\n      text,\n      dueDate,\n      priority\n    });\n    setContact({\n      ...contact,\n      todos: [...contact.todos, response.data]\n    });\n    setNewTodo({\n      text: '',\n      dueDate: '',\n      priority: 'Medium'\n    }); // Reset form\n  };\n  const handleDeleteTodo = async todoId => {\n    await axios.delete(`/api/contacts/${id}/todos/${todoId}`);\n    setContact({\n      ...contact,\n      todos: contact.todos.filter(todo => todo._id !== todoId)\n    });\n  };\n  const handleToggleComplete = async todoId => {\n    const todo = contact.todos.find(todo => todo._id === todoId);\n    const updatedTodo = {\n      ...todo,\n      completed: !todo.completed\n    };\n    await axios.put(`/api/contacts/${id}/todos/${todoId}`, updatedTodo);\n    setContact({\n      ...contact,\n      todos: contact.todos.map(todo => todo._id === todoId ? updatedTodo : todo)\n    });\n  };\n\n  // Handle Reminder actions\n  const handleAddReminder = async () => {\n    const {\n      text,\n      date,\n      recurring\n    } = newReminder;\n    if (!text || !date) return;\n    const response = await axios.post(`/api/contacts/${id}/reminders`, {\n      text,\n      date,\n      recurring\n    });\n    setContact({\n      ...contact,\n      reminders: [...contact.reminders, response.data]\n    });\n    setNewReminder({\n      text: '',\n      date: '',\n      recurring: false\n    }); // Reset form\n  };\n  const handleDeleteReminder = async reminderId => {\n    await axios.delete(`/api/contacts/${id}/reminders/${reminderId}`);\n    setContact({\n      ...contact,\n      reminders: contact.reminders.filter(reminder => reminder._id !== reminderId)\n    });\n  };\n\n  // Handle Finance actions\n  const handleAddTransaction = async () => {\n    const {\n      amount,\n      description,\n      category,\n      date\n    } = newTransaction;\n    if (!amount || !description || !date) return;\n    const response = await axios.post(`/api/contacts/${id}/finance`, {\n      amount,\n      description,\n      category,\n      date\n    });\n    setContact({\n      ...contact,\n      transactions: [...contact.transactions, response.data]\n    });\n    setNewTransaction({\n      amount: '',\n      description: '',\n      category: 'Expense',\n      date: ''\n    }); // Reset form\n  };\n  const handleDeleteTransaction = async transactionId => {\n    await axios.delete(`/api/contacts/${id}/finance/${transactionId}`);\n    setContact({\n      ...contact,\n      transactions: contact.transactions.filter(transaction => transaction._id !== transactionId)\n    });\n  };\n\n  // Sorting todos by due date\n  const handleSortTodos = () => {\n    const sorted = [...contact.todos].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n    setSortedTodos(sorted);\n  };\n\n  // Filtering todos by priority\n  const handleFilterTodos = priority => {\n    setFilter(priority);\n    const filtered = priority === 'All' ? contact.todos : contact.todos.filter(todo => todo.priority === priority);\n    setSortedTodos(filtered);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"individual-contact\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: () => window.history.back(),\n        children: \"\\u2190 Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contact-summary\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contact-photo\",\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"bi bi-person-circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: contact.name || \"Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab ${activeTab === 'todo' ? 'active' : ''}`,\n        onClick: () => setActiveTab('todo'),\n        children: [/*#__PURE__*/_jsxDEV(FaCheckSquare, {\n          className: \"icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 11\n        }, this), \" Todo\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab ${activeTab === 'reminder' ? 'active' : ''}`,\n        onClick: () => setActiveTab('reminder'),\n        children: [/*#__PURE__*/_jsxDEV(FaBell, {\n          className: \"icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 11\n        }, this), \" Reminder\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab ${activeTab === 'finance' ? 'active' : ''}`,\n        onClick: () => setActiveTab('finance'),\n        children: [/*#__PURE__*/_jsxDEV(FaMoneyBillWave, {\n          className: \"icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 11\n        }, this), \" Finance\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: [activeTab === 'todo' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todo-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-button\",\n          onClick: handleAddTodo,\n          children: \"+ Add New Todo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 13\n        }, this), contact.todos && contact.todos.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSortTodos,\n            children: \"Sort by Due Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: e => handleFilterTodos(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"All\",\n              children: \"All\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 544,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Low\",\n              children: \"Low\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 545,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Medium\",\n              children: \"Medium\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 546,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"High\",\n              children: \"High\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 547,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: sortedTodos.map(todo => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [todo.text, \" - \", todo.dueDate, \" - \", todo.priority, /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleToggleComplete(todo._id),\n                children: todo.completed ? 'Mark Incomplete' : 'Mark Complete'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 553,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleDeleteTodo(todo._id),\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 556,\n                columnNumber: 23\n              }, this)]\n            }, todo._id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 551,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 11\n      }, this), activeTab === 'reminder' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reminder-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-button\",\n          onClick: handleAddReminder,\n          children: \"+ Add New Reminder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 13\n        }, this), contact.reminders && contact.reminders.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: contact.reminders.map(reminder => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [reminder.text, \" - \", reminder.date, \" - \", reminder.recurring ? 'Recurring' : 'One-time', /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDeleteReminder(reminder._id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 573,\n              columnNumber: 21\n            }, this)]\n          }, reminder._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 11\n      }, this), activeTab === 'finance' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"finance-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-button\",\n          onClick: handleAddTransaction,\n          children: \"+ Add New Transaction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 13\n        }, this), contact.transactions && contact.transactions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: contact.transactions.map(transaction => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [transaction.description, \" - \", transaction.amount, \" - \", transaction.category, /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDeleteTransaction(transaction._id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 589,\n              columnNumber: 21\n            }, this)]\n          }, transaction._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 513,\n    columnNumber: 5\n  }, this);\n};\n_s(IndividualContact, \"yjWe422339jVX33oaxkfQMoCQV4=\", false, function () {\n  return [useLocation, useParams];\n});\n_c = IndividualContact;\nexport default IndividualContact;\nvar _c;\n$RefreshReg$(_c, \"IndividualContact\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useParams","axios","FaCheckSquare","FaBell","FaMoneyBillWave","jsxDEV","_jsxDEV","fetchContact","id","response","get","data","IndividualContact","_s","location","contact","setContact","activeTab","setActiveTab","newTodo","setNewTodo","text","dueDate","priority","newReminder","setNewReminder","date","recurring","newTransaction","setNewTransaction","amount","description","category","sortedTodos","setSortedTodos","filter","setFilter","then","children","fileName","_jsxFileName","lineNumber","columnNumber","handleAddTodo","post","todos","handleDeleteTodo","todoId","delete","todo","_id","handleToggleComplete","find","updatedTodo","completed","put","map","handleAddReminder","reminders","handleDeleteReminder","reminderId","reminder","handleAddTransaction","transactions","handleDeleteTransaction","transactionId","transaction","handleSortTodos","sorted","sort","a","b","Date","handleFilterTodos","filtered","className","onClick","window","history","back","name","length","onChange","e","target","value","_c","$RefreshReg$"],"sources":["D:/PeoplePixel1/src/IndividualContact.js"],"sourcesContent":["\r\n// // src/IndividualContact.js\r\n// import React, { useState } from 'react';\r\n// import { useLocation, Link } from 'react-router-dom';\r\n// import './styles.css';\r\n// import { FaCheckSquare, FaBell, FaMoneyBillWave } from 'react-icons/fa';\r\n// import Contacts from './Contacts';\r\n\r\n// const IndividualContact = () => {\r\n//   const location = useLocation();\r\n//   const params = new URLSearchParams(location.search);\r\n//   const name = params.get('name'); // Get the contact name from URL\r\n//   const avatar = params.get('avatar'); // Get the contact avatar\r\n\r\n//   const [activeTab, setActiveTab] = useState('todo'); // State to track active tab\r\n//   const [todos, setTodos] = useState([{ text: \"Complete Today's Task\" }, { text: \"Schedule meeting\" }]); // Sample todo data\r\n//   const [reminders, setReminders] = useState([]); // Sample reminder data\r\n//   const [transactions, setTransactions] = useState([]); // Sample transaction data\r\n\r\n//   return (\r\n//     <div className=\"individual-contact\">\r\n//       <header className=\"header\">\r\n//         {/* <button className=\"back-button\">← Contacts</button> */}\r\n//         <button className=\"back-button\" onClick={() => window.history.back()}>← Contacts</button>\r\n\r\n//         {/* <h1 className=\"title\">Contact</h1> */}\r\n//       </header>\r\n//       <div className=\"contact-summary\">\r\n//         <div className=\"contact-photo\">\r\n//           <i className=\"bi bi-person-circle\"></i>\r\n//         </div>\r\n//         <h2>{name || \"Contact\"}</h2>\r\n//       </div>\r\n//       <div className=\"tab-bar\">\r\n//         <button\r\n//           className={`tab ${activeTab === 'todo' ? 'active' : ''}`}\r\n//           onClick={() => setActiveTab('todo')}\r\n//         >\r\n//           <FaCheckSquare className=\"icon\" /> Todo\r\n//         </button>\r\n//         <button\r\n//           className={`tab ${activeTab === 'reminder' ? 'active' : ''}`}\r\n//           onClick={() => setActiveTab('reminder')}\r\n//         >\r\n//           <FaBell className=\"icon\" /> Reminder\r\n//         </button>\r\n//         <button\r\n//           className={`tab ${activeTab === 'finance' ? 'active' : ''}`}\r\n//           onClick={() => setActiveTab('finance')}\r\n//         >\r\n//           <FaMoneyBillWave className=\"icon\" /> Finance\r\n//         </button>\r\n//       </div>\r\n//       <div className=\"tab-content\">\r\n//         {activeTab === 'todo' && (\r\n//           <div className=\"todo-content\">\r\n//             {todos.map((todo, index) => (\r\n//               <div key={index} className=\"list-item\">\r\n//                 <span>{todo.text}</span>\r\n//                 <FaCheckSquare className=\"status-icon\" />\r\n//               </div>\r\n//             ))}\r\n//             <button className=\"add-button\">+ Add New Todo</button>\r\n//           </div>\r\n//         )}\r\n//         {activeTab === 'reminder' && (\r\n//           <div className=\"reminder-content\">\r\n//             <button className=\"add-button\">+ Add New Reminder</button>\r\n//           </div>\r\n//         )}\r\n//         {activeTab === 'finance' && (\r\n//           <div className=\"finance-content\">\r\n//             <button className=\"add-button\">+ Add New Transaction</button>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default IndividualContact;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // src/IndividualContact.js\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useLocation, useNavigate } from 'react-router-dom';\r\n// import './styles.css';\r\n// import { FaCheckSquare, FaBell, FaMoneyBillWave } from 'react-icons/fa';\r\n// // import { getContactById, updateContact, deleteContact } from '../api';\r\n// import { getContactById, updateContact, deleteContact } from './api'; // relative to src/\r\n\r\n// const IndividualContact = () => {\r\n//   const location = useLocation();\r\n//   const navigate = useNavigate();\r\n//   const params = new URLSearchParams(location.search);\r\n//   const contactId = params.get('id'); // Assuming ID is passed in URL as 'id'\r\n\r\n//   const [contact, setContact] = useState(null);\r\n//   const [activeTab, setActiveTab] = useState('todo');\r\n//   const [todos, setTodos] = useState([]);\r\n//   const [reminders, setReminders] = useState([]);\r\n//   const [transactions, setTransactions] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     // Fetch the contact data by ID\r\n//     const fetchContact = async () => {\r\n//       try {\r\n//         const data = await getContactById(contactId);\r\n//         setContact(data);\r\n//         setTodos(data.todos || []);\r\n//         setReminders(data.reminders || []);\r\n//         setTransactions(data.transactions || []);\r\n//       } catch (error) {\r\n//         console.error('Error fetching contact data:', error);\r\n//       }\r\n//     };\r\n//     fetchContact();\r\n//   }, [contactId]);\r\n\r\n//   const handleAddTodo = () => {\r\n//     const newTodo = prompt('Enter new todo:');\r\n//     if (newTodo) {\r\n//       const updatedTodos = [...todos, { text: newTodo }];\r\n//       setTodos(updatedTodos);\r\n//       updateContact(contactId, { ...contact, todos: updatedTodos });\r\n//     }\r\n//   };\r\n\r\n//   const handleAddReminder = () => {\r\n//     const newReminder = prompt('Enter new reminder:');\r\n//     if (newReminder) {\r\n//       const updatedReminders = [...reminders, { text: newReminder }];\r\n//       setReminders(updatedReminders);\r\n//       updateContact(contactId, { ...contact, reminders: updatedReminders });\r\n//     }\r\n//   };\r\n\r\n//   const handleAddTransaction = () => {\r\n//     const newTransaction = prompt('Enter new transaction:');\r\n//     if (newTransaction) {\r\n//       const updatedTransactions = [...transactions, { text: newTransaction }];\r\n//       setTransactions(updatedTransactions);\r\n//       updateContact(contactId, { ...contact, transactions: updatedTransactions });\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"individual-contact\">\r\n//       <header className=\"header\">\r\n//         <button className=\"back-button\" onClick={() => navigate(-1)}>← Contacts</button>\r\n//       </header>\r\n      \r\n//       <div className=\"contact-summary\">\r\n//         <div className=\"contact-photo\">\r\n//           {contact ? contact.avatar : <i className=\"bi bi-person-circle\"></i>}\r\n//         </div>\r\n//         <h2>{contact ? contact.name : \"Contact\"}</h2>\r\n//       </div>\r\n\r\n//       <div className=\"tab-bar\">\r\n//         <button\r\n//           className={`tab ${activeTab === 'todo' ? 'active' : ''}`}\r\n//           onClick={() => setActiveTab('todo')}\r\n//         >\r\n//           <FaCheckSquare className=\"icon\" /> Todo\r\n//         </button>\r\n//         <button\r\n//           className={`tab ${activeTab === 'reminder' ? 'active' : ''}`}\r\n//           onClick={() => setActiveTab('reminder')}\r\n//         >\r\n//           <FaBell className=\"icon\" /> Reminder\r\n//         </button>\r\n//         <button\r\n//           className={`tab ${activeTab === 'finance' ? 'active' : ''}`}\r\n//           onClick={() => setActiveTab('finance')}\r\n//         >\r\n//           <FaMoneyBillWave className=\"icon\" /> Finance\r\n//         </button>\r\n//       </div>\r\n\r\n//       <div className=\"tab-content\">\r\n//         {activeTab === 'todo' && (\r\n//           <div className=\"todo-content\">\r\n//             {todos.map((todo, index) => (\r\n//               <div key={index} className=\"list-item\">\r\n//                 <span>{todo.text}</span>\r\n//                 <FaCheckSquare className=\"status-icon\" />\r\n//               </div>\r\n//             ))}\r\n//             <button className=\"add-button\" onClick={handleAddTodo}>+ Add New Todo</button>\r\n//           </div>\r\n//         )}\r\n//         {activeTab === 'reminder' && (\r\n//           <div className=\"reminder-content\">\r\n//             {reminders.map((reminder, index) => (\r\n//               <div key={index} className=\"list-item\">\r\n//                 <span>{reminder.text}</span>\r\n//                 <FaBell className=\"status-icon\" />\r\n//               </div>\r\n//             ))}\r\n//             <button className=\"add-button\" onClick={handleAddReminder}>+ Add New Reminder</button>\r\n//           </div>\r\n//         )}\r\n//         {activeTab === 'finance' && (\r\n//           <div className=\"finance-content\">\r\n//             {transactions.map((transaction, index) => (\r\n//               <div key={index} className=\"list-item\">\r\n//                 <span>{transaction.text}</span>\r\n//                 <FaMoneyBillWave className=\"status-icon\" />\r\n//               </div>\r\n//             ))}\r\n//             <button className=\"add-button\" onClick={handleAddTransaction}>+ Add New Transaction</button>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default IndividualContact;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // src/IndividualContact.js\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useLocation, Link } from 'react-router-dom';\r\n// import axios from 'axios';\r\n// import './styles.css';\r\n// import { FaCheckSquare, FaBell, FaMoneyBillWave } from 'react-icons/fa';\r\n\r\n// const API_URL = 'http://localhost:5000/api'; // Backend API URL\r\n\r\n// const IndividualContact = () => {\r\n//   const location = useLocation();\r\n//   const params = new URLSearchParams(location.search);\r\n//   const contactId = params.get('id'); // Get the contact ID from URL\r\n//   const name = params.get('name'); // Get the contact name\r\n//   const avatar = params.get('avatar'); // Get the contact avatar\r\n\r\n//   // State management\r\n//   const [activeTab, setActiveTab] = useState('todo');\r\n//   const [todos, setTodos] = useState([]);\r\n//   const [reminders, setReminders] = useState([]);\r\n//   const [transactions, setTransactions] = useState([]);\r\n\r\n//   // Fetch data for todos, reminders, and transactions\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const todosRes = await axios.get(`${API_URL}/contacts/${contactId}/todos`);\r\n//         setTodos(todosRes.data);\r\n\r\n//         const remindersRes = await axios.get(`${API_URL}/contacts/${contactId}/reminders`);\r\n//         setReminders(remindersRes.data);\r\n\r\n//         const transactionsRes = await axios.get(`${API_URL}/contacts/${contactId}/finance`);\r\n//         setTransactions(transactionsRes.data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching data:', error);\r\n//       }\r\n//     };\r\n//     fetchData();\r\n//   }, [contactId]);\r\n\r\n//   // Add Todo\r\n//   const addTodo = async (todoData) => {\r\n//     try {\r\n//       const response = await axios.post(`${API_URL}/contacts/${contactId}/todos`, todoData);\r\n//       setTodos([...todos, response.data]);\r\n//     } catch (error) {\r\n//       console.error('Error adding todo:', error);\r\n//     }\r\n//   };\r\n\r\n//   // Edit Todo\r\n//   const editTodo = async (todoId, updatedTodoData) => {\r\n//     try {\r\n//       const response = await axios.put(`${API_URL}/contacts/${contactId}/todos/${todoId}`, updatedTodoData);\r\n//       const updatedTodos = todos.map(todo =>\r\n//         todo._id === todoId ? { ...todo, ...updatedTodoData } : todo\r\n//       );\r\n//       setTodos(updatedTodos);\r\n//     } catch (error) {\r\n//       console.error('Error editing todo:', error);\r\n//     }\r\n//   };\r\n\r\n//   // Delete Todo\r\n//   const deleteTodo = async (todoId) => {\r\n//     try {\r\n//       await axios.delete(`${API_URL}/contacts/${contactId}/todos/${todoId}`);\r\n//       setTodos(todos.filter(todo => todo._id !== todoId));\r\n//     } catch (error) {\r\n//       console.error('Error deleting todo:', error);\r\n//     }\r\n//   };\r\n\r\n//   // Mark Todo as Complete\r\n//   const toggleTodoComplete = async (todoId) => {\r\n//     try {\r\n//       const todoToUpdate = todos.find(todo => todo._id === todoId);\r\n//       const updatedTodo = { ...todoToUpdate, completed: !todoToUpdate.completed };\r\n//       await axios.put(`${API_URL}/contacts/${contactId}/todos/${todoId}`, updatedTodo);\r\n//       setTodos(todos.map(todo => (todo._id === todoId ? updatedTodo : todo)));\r\n//     } catch (error) {\r\n//       console.error('Error toggling todo complete:', error);\r\n//     }\r\n//   };\r\n\r\n//   // Add Reminder\r\n//   const addReminder = async (reminderData) => {\r\n//     try {\r\n//       const response = await axios.post(`${API_URL}/contacts/${contactId}/reminders`, reminderData);\r\n//       setReminders([...reminders, response.data]);\r\n//     } catch (error) {\r\n//       console.error('Error adding reminder:', error);\r\n//     }\r\n//   };\r\n\r\n//   // Add Finance Transaction\r\n//   const addTransaction = async (transactionData) => {\r\n//     try {\r\n//       const response = await axios.post(`${API_URL}/contacts/${contactId}/finance`, transactionData);\r\n//       setTransactions([...transactions, response.data]);\r\n//     } catch (error) {\r\n//       console.error('Error adding transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"individual-contact\">\r\n//       <header className=\"header\">\r\n//         <button className=\"back-button\" onClick={() => window.history.back()}>← Contacts</button>\r\n//       </header>\r\n//       <div className=\"contact-summary\">\r\n//         <div className=\"contact-photo\">\r\n//           <i className=\"bi bi-person-circle\"></i>\r\n//         </div>\r\n//         <h2>{name || \"Contact\"}</h2>\r\n//       </div>\r\n\r\n//       <div className=\"tab-bar\">\r\n//         <button className={`tab ${activeTab === 'todo' ? 'active' : ''}`} onClick={() => setActiveTab('todo')}>\r\n//           <FaCheckSquare className=\"icon\" /> Todo\r\n//         </button>\r\n//         <button className={`tab ${activeTab === 'reminder' ? 'active' : ''}`} onClick={() => setActiveTab('reminder')}>\r\n//           <FaBell className=\"icon\" /> Reminder\r\n//         </button>\r\n//         <button className={`tab ${activeTab === 'finance' ? 'active' : ''}`} onClick={() => setActiveTab('finance')}>\r\n//           <FaMoneyBillWave className=\"icon\" /> Finance\r\n//         </button>\r\n//       </div>\r\n\r\n//       <div className=\"tab-content\">\r\n//         {activeTab === 'todo' && (\r\n//           <div className=\"todo-content\">\r\n//             {todos.map((todo) => (\r\n//               <div key={todo._id} className=\"list-item\">\r\n//                 <span>{todo.text}</span>\r\n//                 <button onClick={() => toggleTodoComplete(todo._id)}>{todo.completed ? 'Unmark' : 'Complete'}</button>\r\n//                 <button onClick={() => deleteTodo(todo._id)}>Delete</button>\r\n//               </div>\r\n//             ))}\r\n//             <button className=\"add-button\" onClick={() => addTodo({ text: 'New Todo', completed: false })}>+ Add New Todo</button>\r\n//           </div>\r\n//         )}\r\n\r\n//         {activeTab === 'reminder' && (\r\n//           <div className=\"reminder-content\">\r\n//             <button className=\"add-button\" onClick={() => addReminder({ text: 'New Reminder' })}>+ Add New Reminder</button>\r\n//           </div>\r\n//         )}\r\n\r\n//         {activeTab === 'finance' && (\r\n//           <div className=\"finance-content\">\r\n//             <button className=\"add-button\" onClick={() => addTransaction({ amount: 100, category: 'expense' })}>+ Add New Transaction</button>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default IndividualContact;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// src/IndividualContact.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './styles.css';\r\nimport { FaCheckSquare, FaBell, FaMoneyBillWave } from 'react-icons/fa';\r\n\r\n// Helper function to fetch the contact data by ID\r\nconst fetchContact = async (id) => {\r\n  const response = await axios.get(`/api/contacts/${id}`);\r\n  return response.data;\r\n};\r\n\r\nconst IndividualContact = () => {\r\n  const location = useLocation();\r\n  const { id } = useParams(); // Contact ID from URL\r\n  const [contact, setContact] = useState(null); // Initialize contact as null\r\n  const [activeTab, setActiveTab] = useState('todo'); // State to track active tab\r\n\r\n  const [newTodo, setNewTodo] = useState({ text: '', dueDate: '', priority: 'Medium' });\r\n  const [newReminder, setNewReminder] = useState({ text: '', date: '', recurring: false });\r\n  const [newTransaction, setNewTransaction] = useState({ amount: '', description: '', category: 'Expense', date: '' });\r\n\r\n  const [sortedTodos, setSortedTodos] = useState([]);\r\n  const [filter, setFilter] = useState('All'); // Filter for todos\r\n\r\n  // Fetch the contact data when component loads\r\n  useEffect(() => {\r\n    fetchContact(id).then(setContact);\r\n  }, [id]);\r\n\r\n  // Check if contact is available before attempting to access its properties\r\n  if (!contact) {\r\n    return <div>Loading...</div>; // Display loading message while contact data is being fetched\r\n  }\r\n\r\n  // Handle Todo actions\r\n  const handleAddTodo = async () => {\r\n    const { text, dueDate, priority } = newTodo;\r\n    if (!text || !dueDate) return;\r\n\r\n    const response = await axios.post(`/api/contacts/${id}/todos`, { text, dueDate, priority });\r\n    setContact({ ...contact, todos: [...contact.todos, response.data] });\r\n    setNewTodo({ text: '', dueDate: '', priority: 'Medium' }); // Reset form\r\n  };\r\n\r\n  const handleDeleteTodo = async (todoId) => {\r\n    await axios.delete(`/api/contacts/${id}/todos/${todoId}`);\r\n    setContact({ ...contact, todos: contact.todos.filter(todo => todo._id !== todoId) });\r\n  };\r\n\r\n  const handleToggleComplete = async (todoId) => {\r\n    const todo = contact.todos.find(todo => todo._id === todoId);\r\n    const updatedTodo = { ...todo, completed: !todo.completed };\r\n    await axios.put(`/api/contacts/${id}/todos/${todoId}`, updatedTodo);\r\n    setContact({\r\n      ...contact,\r\n      todos: contact.todos.map(todo => (todo._id === todoId ? updatedTodo : todo))\r\n    });\r\n  };\r\n\r\n  // Handle Reminder actions\r\n  const handleAddReminder = async () => {\r\n    const { text, date, recurring } = newReminder;\r\n    if (!text || !date) return;\r\n\r\n    const response = await axios.post(`/api/contacts/${id}/reminders`, { text, date, recurring });\r\n    setContact({ ...contact, reminders: [...contact.reminders, response.data] });\r\n    setNewReminder({ text: '', date: '', recurring: false }); // Reset form\r\n  };\r\n\r\n  const handleDeleteReminder = async (reminderId) => {\r\n    await axios.delete(`/api/contacts/${id}/reminders/${reminderId}`);\r\n    setContact({\r\n      ...contact,\r\n      reminders: contact.reminders.filter(reminder => reminder._id !== reminderId)\r\n    });\r\n  };\r\n\r\n  // Handle Finance actions\r\n  const handleAddTransaction = async () => {\r\n    const { amount, description, category, date } = newTransaction;\r\n    if (!amount || !description || !date) return;\r\n\r\n    const response = await axios.post(`/api/contacts/${id}/finance`, { amount, description, category, date });\r\n    setContact({ ...contact, transactions: [...contact.transactions, response.data] });\r\n    setNewTransaction({ amount: '', description: '', category: 'Expense', date: '' }); // Reset form\r\n  };\r\n\r\n  const handleDeleteTransaction = async (transactionId) => {\r\n    await axios.delete(`/api/contacts/${id}/finance/${transactionId}`);\r\n    setContact({\r\n      ...contact,\r\n      transactions: contact.transactions.filter(transaction => transaction._id !== transactionId)\r\n    });\r\n  };\r\n\r\n  // Sorting todos by due date\r\n  const handleSortTodos = () => {\r\n    const sorted = [...contact.todos].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\r\n    setSortedTodos(sorted);\r\n  };\r\n\r\n  // Filtering todos by priority\r\n  const handleFilterTodos = (priority) => {\r\n    setFilter(priority);\r\n    const filtered = priority === 'All' ? contact.todos : contact.todos.filter(todo => todo.priority === priority);\r\n    setSortedTodos(filtered);\r\n  };\r\n\r\n  return (\r\n    <div className=\"individual-contact\">\r\n      <header className=\"header\">\r\n        <button className=\"back-button\" onClick={() => window.history.back()}>← Contacts</button>\r\n      </header>\r\n      <div className=\"contact-summary\">\r\n        <div className=\"contact-photo\">\r\n          <i className=\"bi bi-person-circle\"></i>\r\n        </div>\r\n        <h2>{contact.name || \"Contact\"}</h2>\r\n      </div>\r\n\r\n      <div className=\"tab-bar\">\r\n        <button className={`tab ${activeTab === 'todo' ? 'active' : ''}`} onClick={() => setActiveTab('todo')}>\r\n          <FaCheckSquare className=\"icon\" /> Todo\r\n        </button>\r\n        <button className={`tab ${activeTab === 'reminder' ? 'active' : ''}`} onClick={() => setActiveTab('reminder')}>\r\n          <FaBell className=\"icon\" /> Reminder\r\n        </button>\r\n        <button className={`tab ${activeTab === 'finance' ? 'active' : ''}`} onClick={() => setActiveTab('finance')}>\r\n          <FaMoneyBillWave className=\"icon\" /> Finance\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"tab-content\">\r\n        {activeTab === 'todo' && (\r\n          <div className=\"todo-content\">\r\n            <button className=\"add-button\" onClick={handleAddTodo}>+ Add New Todo</button>\r\n            {contact.todos && contact.todos.length > 0 && (\r\n              <div>\r\n                <button onClick={handleSortTodos}>Sort by Due Date</button>\r\n                <select onChange={(e) => handleFilterTodos(e.target.value)}>\r\n                  <option value=\"All\">All</option>\r\n                  <option value=\"Low\">Low</option>\r\n                  <option value=\"Medium\">Medium</option>\r\n                  <option value=\"High\">High</option>\r\n                </select>\r\n                <ul>\r\n                  {sortedTodos.map(todo => (\r\n                    <li key={todo._id}>\r\n                      {todo.text} - {todo.dueDate} - {todo.priority}\r\n                      <button onClick={() => handleToggleComplete(todo._id)}>\r\n                        {todo.completed ? 'Mark Incomplete' : 'Mark Complete'}\r\n                      </button>\r\n                      <button onClick={() => handleDeleteTodo(todo._id)}>Delete</button>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {activeTab === 'reminder' && (\r\n          <div className=\"reminder-content\">\r\n            <button className=\"add-button\" onClick={handleAddReminder}>+ Add New Reminder</button>\r\n            {contact.reminders && contact.reminders.length > 0 && (\r\n              <ul>\r\n                {contact.reminders.map(reminder => (\r\n                  <li key={reminder._id}>\r\n                    {reminder.text} - {reminder.date} - {reminder.recurring ? 'Recurring' : 'One-time'}\r\n                    <button onClick={() => handleDeleteReminder(reminder._id)}>Delete</button>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {activeTab === 'finance' && (\r\n          <div className=\"finance-content\">\r\n            <button className=\"add-button\" onClick={handleAddTransaction}>+ Add New Transaction</button>\r\n            {contact.transactions && contact.transactions.length > 0 && (\r\n              <ul>\r\n                {contact.transactions.map(transaction => (\r\n                  <li key={transaction._id}>\r\n                    {transaction.description} - {transaction.amount} - {transaction.category}\r\n                    <button onClick={() => handleDeleteTransaction(transaction._id)}>Delete</button>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IndividualContact;\r\n\r\n"],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}