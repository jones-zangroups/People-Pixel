{"ast":null,"code":"var _jsxFileName = \"D:\\\\PeoplePixel1\\\\src\\\\Contacts.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation, Link } from 'react-router-dom';\nimport axios from 'axios';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Contacts() {\n  _s();\n  const location = useLocation();\n  const params = new URLSearchParams(location.search);\n  const category = params.get('category');\n  const [contacts, setContacts] = useState([]);\n  const [newContactName, setNewContactName] = useState('');\n  const [newContactAvatar, setNewContactAvatar] = useState('');\n  const [showForm, setShowForm] = useState(false);\n  useEffect(() => {\n    const fetchContacts = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/contacts');\n        setContacts(response.data);\n      } catch (error) {\n        console.error('Error fetching contacts:', error);\n      }\n    };\n    fetchContacts();\n  }, []);\n  const handleAddContact = async () => {\n    try {\n      const newContact = {\n        name: newContactName,\n        avatar: newContactAvatar\n      };\n      const response = await axios.post('http://localhost:5000/api/contacts', newContact);\n      setContacts([...contacts, response.data]); // Update contacts state\n      setNewContactName('');\n      setNewContactAvatar('');\n      setShowForm(false); // Hide the form after submission\n    } catch (error) {\n      console.error('Error adding contact:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowForm(!showForm),\n      children: showForm ? 'Cancel' : 'Create New Contact'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), showForm && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-contact-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Contact Name\",\n        value: newContactName,\n        onChange: e => setNewContactName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Avatar URL\",\n        value: newContactAvatar,\n        onChange: e => setNewContactAvatar(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddContact,\n        children: \"Save Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: contacts.length > 0 ? contacts.map((contact, index) => /*#__PURE__*/_jsxDEV(Link, {\n        className: \"card\",\n        to: `/contact?name=${contact.name}&avatar=${contact.avatar}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"avatar\",\n          children: contact.avatar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"name\",\n          children: contact.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-contacts\",\n        children: \"No contacts found for this category.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Contacts, \"GB8i+01UdDvjSjfzuPYkX9dP5V0=\", false, function () {\n  return [useLocation];\n});\n_c = Contacts;\nexport default Contacts;\n\n// \n\n// // src/Contacts.js\n// import React, { useState, useEffect } from 'react';\n// import { useLocation, Link } from 'react-router-dom';\n// import './styles.css';\n// import axios from 'axios';\n\n// const Contacts = () => {\n//   const location = useLocation();\n//   const params = new URLSearchParams(location.search);\n//   const category = params.get('category');\n\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n//   const [newContact, setNewContact] = useState({\n//     name: '',\n//     avatar: '',\n//     email: '',\n//     contact: ''\n//   });\n//   const [contacts, setContacts] = useState([]);\n\n//   // Fetch initial contacts\n//   useEffect(() => {\n//     // Replace with API call if fetching from server\n//     setContacts(contacts[category] || []);\n//   }, [category]);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewContact({ ...newContact, [name]: value });\n//   };\n\n//   const handleAddContact = () => {\n//     if (!newContact.name || !newContact.avatar) {\n//       alert('Please fill in the required fields.');\n//       return;\n//     }\n\n//     // Replace with your backend endpoint\n//     axios.post('http://localhost:5000/api/contacts', newContact)\n//       .then(response => {\n//         console.log('Contact added:', response.data);\n//         setContacts([...contacts, newContact]);\n//         setIsModalOpen(false);\n//       })\n//       .catch(error => {\n//         console.error('There was an error adding the contact!', error);\n//       });\n//   };\n\n//   return (\n//     <>\n//       <header className=\"header\">\n//         <div className=\"logo\">PeoplePixel</div>\n//         <input type=\"text\" placeholder=\"Search...\" className=\"search-bar\" />\n//         <div className=\"profile-icon\">\n//           <i className=\"bi bi-person-circle\"></i>\n//         </div>\n//       </header>\n//       <h2>\n//         <button className=\"back-button\" onClick={() => window.history.back()}>‚Üê Contacts</button>\n//       </h2>\n//       <h3>\n//         <button className=\"add-contact\" onClick={() => {\n//           setIsModalOpen(true);\n//           console.log('Add Contact button clicked'); // Debugging line\n//         }}>\n//           Add Contact\n//         </button>\n//       </h3>\n//       <div className=\"container\">\n//         {contacts.length > 0 ? (\n//           contacts.map((contact, index) => (\n//             <Link\n//               key={index}\n//               className=\"card\"\n//               to={`/contact?name=${contact.name}&avatar=${contact.avatar}`}\n//             >\n//               <div className=\"avatar\">{contact.avatar}</div>\n//               <p className=\"name\">{contact.name}</p>\n//             </Link>\n//           ))\n//         ) : (\n//           <p className=\"no-contacts\">No contacts found for this category.</p>\n//         )}\n//       </div>\n\n//       {isModalOpen && (\n//         <div className=\"modal\">\n//           <div className=\"modal-content\">\n//             <h2>Add New Contact</h2>\n//             <form>\n//               <label>Name:</label>\n//               <input type=\"text\" name=\"name\" value={newContact.name} onChange={handleInputChange} required />\n//               <label>Avatar:</label>\n//               <input type=\"text\" name=\"avatar\" value={newContact.avatar} onChange={handleInputChange} required />\n//               <label>Email:</label>\n//               <input type=\"email\" name=\"email\" value={newContact.email} onChange={handleInputChange} />\n//               <label>Contact:</label>\n//               <input type=\"text\" name=\"contact\" value={newContact.contact} onChange={handleInputChange} />\n//             </form>\n//             <button onClick={handleAddContact}>Save</button>\n//             <button onClick={() => {\n//               setIsModalOpen(false);\n//               console.log('Modal closed'); // Debugging line\n//             }}>Cancel</button>\n//           </div>\n//         </div>\n//       )}\n\n//       <footer>\n//         <div className=\"footer-links\">\n//           <a href=\"#\">About</a>\n//           <a href=\"#\">Help</a>\n//           <a href=\"#\">Privacy Policy</a>\n//         </div>\n//         <p className=\"copyright\">&copy; 2024 PeoplePixel. All rights reserved.</p>\n//       </footer>\n//     </>\n//   );\n// };\n\n// export default Contacts;\n\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n\n// const Contacts = () => {\n//   const [contacts, setContacts] = useState([]);\n//   const [newContact, setNewContact] = useState({ name: '', avatar: '', category: '' });\n//   const category = 'YourCategoryName'; // Replace this with the actual category you want to fetch\n\n//   useEffect(() => {\n//     fetchContacts();\n//   }, []);\n\n//   const fetchContacts = async () => {\n//     try {\n//       const response = await axios.get(`http://localhost:5000/api/contacts/${category}`);\n//       setContacts(response.data);\n//     } catch (error) {\n//       console.error('Error fetching contacts:', error);\n//     }\n//   };\n\n//   const handleAddContact = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post('http://localhost:5000/api/contacts', newContact);\n//       setNewContact({ name: '', avatar: '', category: '' }); // Reset input fields\n//       fetchContacts(); // Fetch contacts again to update the UI\n//     } catch (error) {\n//       console.error('Error adding contact:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Contacts</h1>\n//       <form onSubmit={handleAddContact}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Name\"\n//           value={newContact.name}\n//           onChange={(e) => setNewContact({ ...newContact, name: e.target.value })}\n//           required\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Avatar URL\"\n//           value={newContact.avatar}\n//           onChange={(e) => setNewContact({ ...newContact, avatar: e.target.value })}\n//           required\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Category\"\n//           value={newContact.category}\n//           onChange={(e) => setNewContact({ ...newContact, category: e.target.value })}\n//           required\n//         />\n//         <button type=\"submit\">Add Contact</button>\n//       </form>\n//       <div>\n//         {contacts.map((contact) => (\n//           <div key={contact._id}>\n//             <h2>{contact.name}</h2>\n//             <img src={contact.avatar} alt={contact.name} />\n//             <p>Category: {contact.category}</p>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Contacts;\nvar _c;\n$RefreshReg$(_c, \"Contacts\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","Link","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Contacts","_s","location","params","URLSearchParams","search","category","get","contacts","setContacts","newContactName","setNewContactName","newContactAvatar","setNewContactAvatar","showForm","setShowForm","fetchContacts","response","data","error","console","handleAddContact","newContact","name","avatar","post","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","type","placeholder","value","onChange","e","target","length","map","contact","index","to","_c","$RefreshReg$"],"sources":["D:/PeoplePixel1/src/Contacts.js"],"sourcesContent":["\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useLocation, Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './styles.css';\r\n\r\nfunction Contacts() {\r\n  const location = useLocation();\r\n  const params = new URLSearchParams(location.search);\r\n  const category = params.get('category');\r\n  const [contacts, setContacts] = useState([]);\r\n  const [newContactName, setNewContactName] = useState('');\r\n  const [newContactAvatar, setNewContactAvatar] = useState('');\r\n  const [showForm, setShowForm] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchContacts = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/contacts');\r\n        setContacts(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching contacts:', error);\r\n      }\r\n    };\r\n\r\n    fetchContacts();\r\n  }, []);\r\n\r\n  const handleAddContact = async () => {\r\n    try {\r\n      const newContact = { name: newContactName, avatar: newContactAvatar };\r\n      const response = await axios.post('http://localhost:5000/api/contacts', newContact);\r\n      setContacts([...contacts, response.data]); // Update contacts state\r\n      setNewContactName('');\r\n      setNewContactAvatar('');\r\n      setShowForm(false); // Hide the form after submission\r\n    } catch (error) {\r\n      console.error('Error adding contact:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button onClick={() => setShowForm(!showForm)}>\r\n        {showForm ? 'Cancel' : 'Create New Contact'}\r\n      </button>\r\n\r\n      {showForm && (\r\n        <div className=\"new-contact-form\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Contact Name\"\r\n            value={newContactName}\r\n            onChange={(e) => setNewContactName(e.target.value)}\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Avatar URL\"\r\n            value={newContactAvatar}\r\n            onChange={(e) => setNewContactAvatar(e.target.value)}\r\n          />\r\n          <button onClick={handleAddContact}>Save Contact</button>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"container\">\r\n        {contacts.length > 0 ? (\r\n          contacts.map((contact, index) => (\r\n            <Link\r\n              key={index}\r\n              className=\"card\"\r\n              to={`/contact?name=${contact.name}&avatar=${contact.avatar}`}\r\n            >\r\n              <div className=\"avatar\">{contact.avatar}</div>\r\n              <p className=\"name\">{contact.name}</p>\r\n            </Link>\r\n          ))\r\n        ) : (\r\n          <p className=\"no-contacts\">No contacts found for this category.</p>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Contacts;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // src/Contacts.js\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useLocation, Link } from 'react-router-dom';\r\n// import './styles.css';\r\n// import axios from 'axios';\r\n\r\n// const Contacts = () => {\r\n//   const location = useLocation();\r\n//   const params = new URLSearchParams(location.search);\r\n//   const category = params.get('category');\r\n\r\n//   const [isModalOpen, setIsModalOpen] = useState(false);\r\n//   const [newContact, setNewContact] = useState({\r\n//     name: '',\r\n//     avatar: '',\r\n//     email: '',\r\n//     contact: ''\r\n//   });\r\n//   const [contacts, setContacts] = useState([]);\r\n\r\n//   // Fetch initial contacts\r\n//   useEffect(() => {\r\n//     // Replace with API call if fetching from server\r\n//     setContacts(contacts[category] || []);\r\n//   }, [category]);\r\n\r\n//   const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setNewContact({ ...newContact, [name]: value });\r\n//   };\r\n\r\n//   const handleAddContact = () => {\r\n//     if (!newContact.name || !newContact.avatar) {\r\n//       alert('Please fill in the required fields.');\r\n//       return;\r\n//     }\r\n\r\n//     // Replace with your backend endpoint\r\n//     axios.post('http://localhost:5000/api/contacts', newContact)\r\n//       .then(response => {\r\n//         console.log('Contact added:', response.data);\r\n//         setContacts([...contacts, newContact]);\r\n//         setIsModalOpen(false);\r\n//       })\r\n//       .catch(error => {\r\n//         console.error('There was an error adding the contact!', error);\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <header className=\"header\">\r\n//         <div className=\"logo\">PeoplePixel</div>\r\n//         <input type=\"text\" placeholder=\"Search...\" className=\"search-bar\" />\r\n//         <div className=\"profile-icon\">\r\n//           <i className=\"bi bi-person-circle\"></i>\r\n//         </div>\r\n//       </header>\r\n//       <h2>\r\n//         <button className=\"back-button\" onClick={() => window.history.back()}>‚Üê Contacts</button>\r\n//       </h2>\r\n//       <h3>\r\n//         <button className=\"add-contact\" onClick={() => {\r\n//           setIsModalOpen(true);\r\n//           console.log('Add Contact button clicked'); // Debugging line\r\n//         }}>\r\n//           Add Contact\r\n//         </button>\r\n//       </h3>\r\n//       <div className=\"container\">\r\n//         {contacts.length > 0 ? (\r\n//           contacts.map((contact, index) => (\r\n//             <Link\r\n//               key={index}\r\n//               className=\"card\"\r\n//               to={`/contact?name=${contact.name}&avatar=${contact.avatar}`}\r\n//             >\r\n//               <div className=\"avatar\">{contact.avatar}</div>\r\n//               <p className=\"name\">{contact.name}</p>\r\n//             </Link>\r\n//           ))\r\n//         ) : (\r\n//           <p className=\"no-contacts\">No contacts found for this category.</p>\r\n//         )}\r\n//       </div>\r\n\r\n//       {isModalOpen && (\r\n//         <div className=\"modal\">\r\n//           <div className=\"modal-content\">\r\n//             <h2>Add New Contact</h2>\r\n//             <form>\r\n//               <label>Name:</label>\r\n//               <input type=\"text\" name=\"name\" value={newContact.name} onChange={handleInputChange} required />\r\n//               <label>Avatar:</label>\r\n//               <input type=\"text\" name=\"avatar\" value={newContact.avatar} onChange={handleInputChange} required />\r\n//               <label>Email:</label>\r\n//               <input type=\"email\" name=\"email\" value={newContact.email} onChange={handleInputChange} />\r\n//               <label>Contact:</label>\r\n//               <input type=\"text\" name=\"contact\" value={newContact.contact} onChange={handleInputChange} />\r\n//             </form>\r\n//             <button onClick={handleAddContact}>Save</button>\r\n//             <button onClick={() => {\r\n//               setIsModalOpen(false);\r\n//               console.log('Modal closed'); // Debugging line\r\n//             }}>Cancel</button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       <footer>\r\n//         <div className=\"footer-links\">\r\n//           <a href=\"#\">About</a>\r\n//           <a href=\"#\">Help</a>\r\n//           <a href=\"#\">Privacy Policy</a>\r\n//         </div>\r\n//         <p className=\"copyright\">&copy; 2024 PeoplePixel. All rights reserved.</p>\r\n//       </footer>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Contacts;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const Contacts = () => {\r\n//   const [contacts, setContacts] = useState([]);\r\n//   const [newContact, setNewContact] = useState({ name: '', avatar: '', category: '' });\r\n//   const category = 'YourCategoryName'; // Replace this with the actual category you want to fetch\r\n\r\n//   useEffect(() => {\r\n//     fetchContacts();\r\n//   }, []);\r\n\r\n//   const fetchContacts = async () => {\r\n//     try {\r\n//       const response = await axios.get(`http://localhost:5000/api/contacts/${category}`);\r\n//       setContacts(response.data);\r\n//     } catch (error) {\r\n//       console.error('Error fetching contacts:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleAddContact = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       await axios.post('http://localhost:5000/api/contacts', newContact);\r\n//       setNewContact({ name: '', avatar: '', category: '' }); // Reset input fields\r\n//       fetchContacts(); // Fetch contacts again to update the UI\r\n//     } catch (error) {\r\n//       console.error('Error adding contact:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Contacts</h1>\r\n//       <form onSubmit={handleAddContact}>\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Name\"\r\n//           value={newContact.name}\r\n//           onChange={(e) => setNewContact({ ...newContact, name: e.target.value })}\r\n//           required\r\n//         />\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Avatar URL\"\r\n//           value={newContact.avatar}\r\n//           onChange={(e) => setNewContact({ ...newContact, avatar: e.target.value })}\r\n//           required\r\n//         />\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Category\"\r\n//           value={newContact.category}\r\n//           onChange={(e) => setNewContact({ ...newContact, category: e.target.value })}\r\n//           required\r\n//         />\r\n//         <button type=\"submit\">Add Contact</button>\r\n//       </form>\r\n//       <div>\r\n//         {contacts.map((contact) => (\r\n//           <div key={contact._id}>\r\n//             <h2>{contact.name}</h2>\r\n//             <img src={contact.avatar} alt={contact.name} />\r\n//             <p>Category: {contact.category}</p>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Contacts;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}