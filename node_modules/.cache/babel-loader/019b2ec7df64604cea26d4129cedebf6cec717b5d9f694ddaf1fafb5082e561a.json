{"ast":null,"code":"// // src/TodoTab.js\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const TodoTab = ({ contactId }) => {\n//   const [todos, setTodos] = useState([]);\n//   const [newTodo, setNewTodo] = useState({ text: '', dueDate: '', priority: 'Medium' });\n//   const [filter, setFilter] = useState('All');\n//   const [sortOrder, setSortOrder] = useState('Due Date');\n\n//   useEffect(() => {\n//     const fetchTodos = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5000/api/todos?contactId=${contactId}`);\n//         setTodos(response.data);\n//       } catch (error) {\n//         console.error('Error fetching todos:', error);\n//       }\n//     };\n//     fetchTodos();\n//   }, [contactId]);\n\n//   const handleAddTodo = async () => {\n//     try {\n//       if (!newTodo.text || !newTodo.dueDate || !newTodo.priority) {\n//         alert('Please fill in all fields');\n//         return;\n//       }\n\n//       const response = await axios.post('http://localhost:5000/api/todos', {\n//         contactId,\n//         text: newTodo.text,\n//         dueDate: new Date(newTodo.dueDate),\n//         priority: newTodo.priority,\n//         completed: false,\n//       });\n\n//       // Append the new todo to the list without refetching all todos\n//       setTodos((prevTodos) => [...prevTodos, response.data]);\n//       setNewTodo({ text: '', dueDate: '', priority: 'Medium' });\n//     } catch (error) {\n//       console.error('Error adding todo:', error.response ? error.response.data : error.message);\n//     }\n//   };\n\n//   const handleToggleComplete = async (id, completed) => {\n//     try {\n//       const response = await axios.put(`http://localhost:5000/api/todos/${id}`, { completed: !completed });\n//       setTodos((prevTodos) =>\n//         prevTodos.map((todo) => (todo._id === id ? { ...todo, completed: response.data.completed } : todo))\n//       );\n//     } catch (error) {\n//       console.error('Error updating todo:', error);\n//     }\n//   };\n\n//   const handleDeleteTodo = async (id) => {\n//     try {\n//       await axios.delete(`http://localhost:5000/api/todos/${id}`);\n//       setTodos((prevTodos) => prevTodos.filter((todo) => todo._id !== id));\n//     } catch (error) {\n//       console.error('Error deleting todo:', error);\n//     }\n//   };\n\n//   const filteredTodos = todos.filter((todo) => {\n//     if (filter === 'Completed') return todo.completed;\n//     if (filter === 'Incomplete') return !todo.completed;\n//     return true;\n//   });\n\n//   const sortedTodos = filteredTodos.sort((a, b) => {\n//     if (sortOrder === 'Priority') {\n//       const priorityOrder = { High: 1, Medium: 2, Low: 3 };\n//       return priorityOrder[a.priority] - priorityOrder[b.priority];\n//     }\n//     return new Date(a.dueDate) - new Date(b.dueDate);\n//   });\n\n//   return (\n//     <div>\n//       <h2>Todo List</h2>\n\n//       {/* Add New Todo Form */}\n//       <div>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Todo text\"\n//           value={newTodo.text}\n//           onChange={(e) => setNewTodo({ ...newTodo, text: e.target.value })}\n//         />\n//         <input\n//           type=\"date\"\n//           value={newTodo.dueDate}\n//           onChange={(e) => setNewTodo({ ...newTodo, dueDate: e.target.value })}\n//         />\n//         <select\n//           value={newTodo.priority}\n//           onChange={(e) => setNewTodo({ ...newTodo, priority: e.target.value })}\n//         >\n//           <option value=\"High\">High</option>\n//           <option value=\"Medium\">Medium</option>\n//           <option value=\"Low\">Low</option>\n//         </select>\n//         <button onClick={handleAddTodo}>Add New Todo</button>\n//       </div>\n\n//       {/* Sorting and Filtering */}\n//       <div>\n//         <label>\n//           Filter Todos:\n//           <select onChange={(e) => setFilter(e.target.value)} value={filter}>\n//             <option value=\"All\">All</option>\n//             <option value=\"Completed\">Completed</option>\n//             <option value=\"Incomplete\">Incomplete</option>\n//           </select>\n//         </label>\n//         <label>\n//           Sort By:\n//           <select onChange={(e) => setSortOrder(e.target.value)} value={sortOrder}>\n//             <option value=\"Due Date\">Due Date</option>\n//             <option value=\"Priority\">Priority</option>\n//           </select>\n//         </label>\n//       </div>\n\n//       {/* Todo List */}\n//       <ul>\n//         {sortedTodos.map((todo) => (\n//           <li key={todo._id}>\n//             <input\n//               type=\"checkbox\"\n//               checked={todo.completed}\n//               onChange={() => handleToggleComplete(todo._id, todo.completed)}\n//             />\n//             <span>{todo.text}</span>\n//             <span> - {new Date(todo.dueDate).toLocaleDateString()}</span>\n//             <span> - Priority: {todo.priority}</span>\n//             <button onClick={() => handleDeleteTodo(todo._id)}>Delete</button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TodoTab;","map":{"version":3,"names":[],"sources":["D:/PeoplePixel1/src/TodoTab.js"],"sourcesContent":["// // src/TodoTab.js\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const TodoTab = ({ contactId }) => {\r\n//   const [todos, setTodos] = useState([]);\r\n//   const [newTodo, setNewTodo] = useState({ text: '', dueDate: '', priority: 'Medium' });\r\n//   const [filter, setFilter] = useState('All');\r\n//   const [sortOrder, setSortOrder] = useState('Due Date');\r\n\r\n//   useEffect(() => {\r\n//     const fetchTodos = async () => {\r\n//       try {\r\n//         const response = await axios.get(`http://localhost:5000/api/todos?contactId=${contactId}`);\r\n//         setTodos(response.data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching todos:', error);\r\n//       }\r\n//     };\r\n//     fetchTodos();\r\n//   }, [contactId]);\r\n\r\n//   const handleAddTodo = async () => {\r\n//     try {\r\n//       if (!newTodo.text || !newTodo.dueDate || !newTodo.priority) {\r\n//         alert('Please fill in all fields');\r\n//         return;\r\n//       }\r\n      \r\n//       const response = await axios.post('http://localhost:5000/api/todos', {\r\n//         contactId,\r\n//         text: newTodo.text,\r\n//         dueDate: new Date(newTodo.dueDate),\r\n//         priority: newTodo.priority,\r\n//         completed: false,\r\n//       });\r\n\r\n//       // Append the new todo to the list without refetching all todos\r\n//       setTodos((prevTodos) => [...prevTodos, response.data]);\r\n//       setNewTodo({ text: '', dueDate: '', priority: 'Medium' });\r\n//     } catch (error) {\r\n//       console.error('Error adding todo:', error.response ? error.response.data : error.message);\r\n//     }\r\n//   };\r\n\r\n//   const handleToggleComplete = async (id, completed) => {\r\n//     try {\r\n//       const response = await axios.put(`http://localhost:5000/api/todos/${id}`, { completed: !completed });\r\n//       setTodos((prevTodos) =>\r\n//         prevTodos.map((todo) => (todo._id === id ? { ...todo, completed: response.data.completed } : todo))\r\n//       );\r\n//     } catch (error) {\r\n//       console.error('Error updating todo:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteTodo = async (id) => {\r\n//     try {\r\n//       await axios.delete(`http://localhost:5000/api/todos/${id}`);\r\n//       setTodos((prevTodos) => prevTodos.filter((todo) => todo._id !== id));\r\n//     } catch (error) {\r\n//       console.error('Error deleting todo:', error);\r\n//     }\r\n//   };\r\n\r\n//   const filteredTodos = todos.filter((todo) => {\r\n//     if (filter === 'Completed') return todo.completed;\r\n//     if (filter === 'Incomplete') return !todo.completed;\r\n//     return true;\r\n//   });\r\n\r\n//   const sortedTodos = filteredTodos.sort((a, b) => {\r\n//     if (sortOrder === 'Priority') {\r\n//       const priorityOrder = { High: 1, Medium: 2, Low: 3 };\r\n//       return priorityOrder[a.priority] - priorityOrder[b.priority];\r\n//     }\r\n//     return new Date(a.dueDate) - new Date(b.dueDate);\r\n//   });\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Todo List</h2>\r\n\r\n//       {/* Add New Todo Form */}\r\n//       <div>\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Todo text\"\r\n//           value={newTodo.text}\r\n//           onChange={(e) => setNewTodo({ ...newTodo, text: e.target.value })}\r\n//         />\r\n//         <input\r\n//           type=\"date\"\r\n//           value={newTodo.dueDate}\r\n//           onChange={(e) => setNewTodo({ ...newTodo, dueDate: e.target.value })}\r\n//         />\r\n//         <select\r\n//           value={newTodo.priority}\r\n//           onChange={(e) => setNewTodo({ ...newTodo, priority: e.target.value })}\r\n//         >\r\n//           <option value=\"High\">High</option>\r\n//           <option value=\"Medium\">Medium</option>\r\n//           <option value=\"Low\">Low</option>\r\n//         </select>\r\n//         <button onClick={handleAddTodo}>Add New Todo</button>\r\n//       </div>\r\n\r\n//       {/* Sorting and Filtering */}\r\n//       <div>\r\n//         <label>\r\n//           Filter Todos:\r\n//           <select onChange={(e) => setFilter(e.target.value)} value={filter}>\r\n//             <option value=\"All\">All</option>\r\n//             <option value=\"Completed\">Completed</option>\r\n//             <option value=\"Incomplete\">Incomplete</option>\r\n//           </select>\r\n//         </label>\r\n//         <label>\r\n//           Sort By:\r\n//           <select onChange={(e) => setSortOrder(e.target.value)} value={sortOrder}>\r\n//             <option value=\"Due Date\">Due Date</option>\r\n//             <option value=\"Priority\">Priority</option>\r\n//           </select>\r\n//         </label>\r\n//       </div>\r\n\r\n//       {/* Todo List */}\r\n//       <ul>\r\n//         {sortedTodos.map((todo) => (\r\n//           <li key={todo._id}>\r\n//             <input\r\n//               type=\"checkbox\"\r\n//               checked={todo.completed}\r\n//               onChange={() => handleToggleComplete(todo._id, todo.completed)}\r\n//             />\r\n//             <span>{todo.text}</span>\r\n//             <span> - {new Date(todo.dueDate).toLocaleDateString()}</span>\r\n//             <span> - Priority: {todo.priority}</span>\r\n//             <button onClick={() => handleDeleteTodo(todo._id)}>Delete</button>\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TodoTab;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}