{"ast":null,"code":"var _jsxFileName = \"D:\\\\PeoplePixel1\\\\src\\\\IndividualContact.js\",\n  _s = $RefreshSig$();\n// // src/IndividualContact.js\n// import React, { useState } from 'react';\n// import { useLocation, Link } from 'react-router-dom';\n// import './styles.css';\n// import { FaCheckSquare, FaBell, FaMoneyBillWave } from 'react-icons/fa';\n// import Contacts from './Contacts';\n\n// const IndividualContact = () => {\n//   const location = useLocation();\n//   const params = new URLSearchParams(location.search);\n//   const name = params.get('name'); // Get the contact name from URL\n//   const avatar = params.get('avatar'); // Get the contact avatar\n\n//   const [activeTab, setActiveTab] = useState('todo'); // State to track active tab\n//   const [todos, setTodos] = useState([{ text: \"Complete Today's Task\" }, { text: \"Schedule meeting\" }]); // Sample todo data\n//   const [reminders, setReminders] = useState([]); // Sample reminder data\n//   const [transactions, setTransactions] = useState([]); // Sample transaction data\n\n//   return (\n//     <div className=\"individual-contact\">\n//       <header className=\"header\">\n//         {/* <button className=\"back-button\">← Contacts</button> */}\n//         <button className=\"back-button\" onClick={() => window.history.back()}>← Contacts</button>\n\n//         {/* <h1 className=\"title\">Contact</h1> */}\n//       </header>\n//       <div className=\"contact-summary\">\n//         <div className=\"contact-photo\">\n//           <i className=\"bi bi-person-circle\"></i>\n//         </div>\n//         <h2>{name || \"Contact\"}</h2>\n//       </div>\n//       <div className=\"tab-bar\">\n//         <button\n//           className={`tab ${activeTab === 'todo' ? 'active' : ''}`}\n//           onClick={() => setActiveTab('todo')}\n//         >\n//           <FaCheckSquare className=\"icon\" /> Todo\n//         </button>\n//         <button\n//           className={`tab ${activeTab === 'reminder' ? 'active' : ''}`}\n//           onClick={() => setActiveTab('reminder')}\n//         >\n//           <FaBell className=\"icon\" /> Reminder\n//         </button>\n//         <button\n//           className={`tab ${activeTab === 'finance' ? 'active' : ''}`}\n//           onClick={() => setActiveTab('finance')}\n//         >\n//           <FaMoneyBillWave className=\"icon\" /> Finance\n//         </button>\n//       </div>\n//       <div className=\"tab-content\">\n//         {activeTab === 'todo' && (\n//           <div className=\"todo-content\">\n//             {todos.map((todo, index) => (\n//               <div key={index} className=\"list-item\">\n//                 <span>{todo.text}</span>\n//                 <FaCheckSquare className=\"status-icon\" />\n//               </div>\n//             ))}\n//             <button className=\"add-button\">+ Add New Todo</button>\n//           </div>\n//         )}\n//         {activeTab === 'reminder' && (\n//           <div className=\"reminder-content\">\n//             <button className=\"add-button\">+ Add New Reminder</button>\n//           </div>\n//         )}\n//         {activeTab === 'finance' && (\n//           <div className=\"finance-content\">\n//             <button className=\"add-button\">+ Add New Transaction</button>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default IndividualContact;\n\n// // src/IndividualContact.js\n// import React, { useEffect, useState } from 'react';\n// import { useLocation, useNavigate } from 'react-router-dom';\n// import './styles.css';\n// import { FaCheckSquare, FaBell, FaMoneyBillWave } from 'react-icons/fa';\n// // import { getContactById, updateContact, deleteContact } from '../api';\n// import { getContactById, updateContact, deleteContact } from './api'; // relative to src/\n\n// const IndividualContact = () => {\n//   const location = useLocation();\n//   const navigate = useNavigate();\n//   const params = new URLSearchParams(location.search);\n//   const contactId = params.get('id'); // Assuming ID is passed in URL as 'id'\n\n//   const [contact, setContact] = useState(null);\n//   const [activeTab, setActiveTab] = useState('todo');\n//   const [todos, setTodos] = useState([]);\n//   const [reminders, setReminders] = useState([]);\n//   const [transactions, setTransactions] = useState([]);\n\n//   useEffect(() => {\n//     // Fetch the contact data by ID\n//     const fetchContact = async () => {\n//       try {\n//         const data = await getContactById(contactId);\n//         setContact(data);\n//         setTodos(data.todos || []);\n//         setReminders(data.reminders || []);\n//         setTransactions(data.transactions || []);\n//       } catch (error) {\n//         console.error('Error fetching contact data:', error);\n//       }\n//     };\n//     fetchContact();\n//   }, [contactId]);\n\n//   const handleAddTodo = () => {\n//     const newTodo = prompt('Enter new todo:');\n//     if (newTodo) {\n//       const updatedTodos = [...todos, { text: newTodo }];\n//       setTodos(updatedTodos);\n//       updateContact(contactId, { ...contact, todos: updatedTodos });\n//     }\n//   };\n\n//   const handleAddReminder = () => {\n//     const newReminder = prompt('Enter new reminder:');\n//     if (newReminder) {\n//       const updatedReminders = [...reminders, { text: newReminder }];\n//       setReminders(updatedReminders);\n//       updateContact(contactId, { ...contact, reminders: updatedReminders });\n//     }\n//   };\n\n//   const handleAddTransaction = () => {\n//     const newTransaction = prompt('Enter new transaction:');\n//     if (newTransaction) {\n//       const updatedTransactions = [...transactions, { text: newTransaction }];\n//       setTransactions(updatedTransactions);\n//       updateContact(contactId, { ...contact, transactions: updatedTransactions });\n//     }\n//   };\n\n//   return (\n//     <div className=\"individual-contact\">\n//       <header className=\"header\">\n//         <button className=\"back-button\" onClick={() => navigate(-1)}>← Contacts</button>\n//       </header>\n\n//       <div className=\"contact-summary\">\n//         <div className=\"contact-photo\">\n//           {contact ? contact.avatar : <i className=\"bi bi-person-circle\"></i>}\n//         </div>\n//         <h2>{contact ? contact.name : \"Contact\"}</h2>\n//       </div>\n\n//       <div className=\"tab-bar\">\n//         <button\n//           className={`tab ${activeTab === 'todo' ? 'active' : ''}`}\n//           onClick={() => setActiveTab('todo')}\n//         >\n//           <FaCheckSquare className=\"icon\" /> Todo\n//         </button>\n//         <button\n//           className={`tab ${activeTab === 'reminder' ? 'active' : ''}`}\n//           onClick={() => setActiveTab('reminder')}\n//         >\n//           <FaBell className=\"icon\" /> Reminder\n//         </button>\n//         <button\n//           className={`tab ${activeTab === 'finance' ? 'active' : ''}`}\n//           onClick={() => setActiveTab('finance')}\n//         >\n//           <FaMoneyBillWave className=\"icon\" /> Finance\n//         </button>\n//       </div>\n\n//       <div className=\"tab-content\">\n//         {activeTab === 'todo' && (\n//           <div className=\"todo-content\">\n//             {todos.map((todo, index) => (\n//               <div key={index} className=\"list-item\">\n//                 <span>{todo.text}</span>\n//                 <FaCheckSquare className=\"status-icon\" />\n//               </div>\n//             ))}\n//             <button className=\"add-button\" onClick={handleAddTodo}>+ Add New Todo</button>\n//           </div>\n//         )}\n//         {activeTab === 'reminder' && (\n//           <div className=\"reminder-content\">\n//             {reminders.map((reminder, index) => (\n//               <div key={index} className=\"list-item\">\n//                 <span>{reminder.text}</span>\n//                 <FaBell className=\"status-icon\" />\n//               </div>\n//             ))}\n//             <button className=\"add-button\" onClick={handleAddReminder}>+ Add New Reminder</button>\n//           </div>\n//         )}\n//         {activeTab === 'finance' && (\n//           <div className=\"finance-content\">\n//             {transactions.map((transaction, index) => (\n//               <div key={index} className=\"list-item\">\n//                 <span>{transaction.text}</span>\n//                 <FaMoneyBillWave className=\"status-icon\" />\n//               </div>\n//             ))}\n//             <button className=\"add-button\" onClick={handleAddTransaction}>+ Add New Transaction</button>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default IndividualContact;\n\n// // src/IndividualContact.js\n// import React, { useState, useEffect } from 'react';\n// import { useLocation, Link } from 'react-router-dom';\n// import axios from 'axios';\n// import './styles.css';\n// import { FaCheckSquare, FaBell, FaMoneyBillWave } from 'react-icons/fa';\n\n// const API_URL = 'http://localhost:5000/api'; // Backend API URL\n\n// const IndividualContact = () => {\n//   const location = useLocation();\n//   const params = new URLSearchParams(location.search);\n//   const contactId = params.get('id'); // Get the contact ID from URL\n//   const name = params.get('name'); // Get the contact name\n//   const avatar = params.get('avatar'); // Get the contact avatar\n\n//   // State management\n//   const [activeTab, setActiveTab] = useState('todo');\n//   const [todos, setTodos] = useState([]);\n//   const [reminders, setReminders] = useState([]);\n//   const [transactions, setTransactions] = useState([]);\n\n//   // Fetch data for todos, reminders, and transactions\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const todosRes = await axios.get(`${API_URL}/contacts/${contactId}/todos`);\n//         setTodos(todosRes.data);\n\n//         const remindersRes = await axios.get(`${API_URL}/contacts/${contactId}/reminders`);\n//         setReminders(remindersRes.data);\n\n//         const transactionsRes = await axios.get(`${API_URL}/contacts/${contactId}/finance`);\n//         setTransactions(transactionsRes.data);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       }\n//     };\n//     fetchData();\n//   }, [contactId]);\n\n//   // Add Todo\n//   const addTodo = async (todoData) => {\n//     try {\n//       const response = await axios.post(`${API_URL}/contacts/${contactId}/todos`, todoData);\n//       setTodos([...todos, response.data]);\n//     } catch (error) {\n//       console.error('Error adding todo:', error);\n//     }\n//   };\n\n//   // Edit Todo\n//   const editTodo = async (todoId, updatedTodoData) => {\n//     try {\n//       const response = await axios.put(`${API_URL}/contacts/${contactId}/todos/${todoId}`, updatedTodoData);\n//       const updatedTodos = todos.map(todo =>\n//         todo._id === todoId ? { ...todo, ...updatedTodoData } : todo\n//       );\n//       setTodos(updatedTodos);\n//     } catch (error) {\n//       console.error('Error editing todo:', error);\n//     }\n//   };\n\n//   // Delete Todo\n//   const deleteTodo = async (todoId) => {\n//     try {\n//       await axios.delete(`${API_URL}/contacts/${contactId}/todos/${todoId}`);\n//       setTodos(todos.filter(todo => todo._id !== todoId));\n//     } catch (error) {\n//       console.error('Error deleting todo:', error);\n//     }\n//   };\n\n//   // Mark Todo as Complete\n//   const toggleTodoComplete = async (todoId) => {\n//     try {\n//       const todoToUpdate = todos.find(todo => todo._id === todoId);\n//       const updatedTodo = { ...todoToUpdate, completed: !todoToUpdate.completed };\n//       await axios.put(`${API_URL}/contacts/${contactId}/todos/${todoId}`, updatedTodo);\n//       setTodos(todos.map(todo => (todo._id === todoId ? updatedTodo : todo)));\n//     } catch (error) {\n//       console.error('Error toggling todo complete:', error);\n//     }\n//   };\n\n//   // Add Reminder\n//   const addReminder = async (reminderData) => {\n//     try {\n//       const response = await axios.post(`${API_URL}/contacts/${contactId}/reminders`, reminderData);\n//       setReminders([...reminders, response.data]);\n//     } catch (error) {\n//       console.error('Error adding reminder:', error);\n//     }\n//   };\n\n//   // Add Finance Transaction\n//   const addTransaction = async (transactionData) => {\n//     try {\n//       const response = await axios.post(`${API_URL}/contacts/${contactId}/finance`, transactionData);\n//       setTransactions([...transactions, response.data]);\n//     } catch (error) {\n//       console.error('Error adding transaction:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"individual-contact\">\n//       <header className=\"header\">\n//         <button className=\"back-button\" onClick={() => window.history.back()}>← Contacts</button>\n//       </header>\n//       <div className=\"contact-summary\">\n//         <div className=\"contact-photo\">\n//           <i className=\"bi bi-person-circle\"></i>\n//         </div>\n//         <h2>{name || \"Contact\"}</h2>\n//       </div>\n\n//       <div className=\"tab-bar\">\n//         <button className={`tab ${activeTab === 'todo' ? 'active' : ''}`} onClick={() => setActiveTab('todo')}>\n//           <FaCheckSquare className=\"icon\" /> Todo\n//         </button>\n//         <button className={`tab ${activeTab === 'reminder' ? 'active' : ''}`} onClick={() => setActiveTab('reminder')}>\n//           <FaBell className=\"icon\" /> Reminder\n//         </button>\n//         <button className={`tab ${activeTab === 'finance' ? 'active' : ''}`} onClick={() => setActiveTab('finance')}>\n//           <FaMoneyBillWave className=\"icon\" /> Finance\n//         </button>\n//       </div>\n\n//       <div className=\"tab-content\">\n//         {activeTab === 'todo' && (\n//           <div className=\"todo-content\">\n//             {todos.map((todo) => (\n//               <div key={todo._id} className=\"list-item\">\n//                 <span>{todo.text}</span>\n//                 <button onClick={() => toggleTodoComplete(todo._id)}>{todo.completed ? 'Unmark' : 'Complete'}</button>\n//                 <button onClick={() => deleteTodo(todo._id)}>Delete</button>\n//               </div>\n//             ))}\n//             <button className=\"add-button\" onClick={() => addTodo({ text: 'New Todo', completed: false })}>+ Add New Todo</button>\n//           </div>\n//         )}\n\n//         {activeTab === 'reminder' && (\n//           <div className=\"reminder-content\">\n//             <button className=\"add-button\" onClick={() => addReminder({ text: 'New Reminder' })}>+ Add New Reminder</button>\n//           </div>\n//         )}\n\n//         {activeTab === 'finance' && (\n//           <div className=\"finance-content\">\n//             <button className=\"add-button\" onClick={() => addTransaction({ amount: 100, category: 'expense' })}>+ Add New Transaction</button>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default IndividualContact;\n\n// // src/IndividualContact.js\n// import React, { useState, useEffect } from 'react';\n// import { useLocation, useParams } from 'react-router-dom';\n// import axios from 'axios';\n// import './styles.css';\n// import { FaCheckSquare, FaBell, FaMoneyBillWave } from 'react-icons/fa';\n\n// // Helper function to fetch the contact data by ID\n// const fetchContact = async (id) => {\n//   const response = await axios.get(`/api/contacts/${id}`);\n//   return response.data;\n// };\n\n// const IndividualContact = () => {\n//   const location = useLocation();\n//   const { id } = useParams(); // Contact ID from URL\n//   const [contact, setContact] = useState(null); // Initialize contact as null\n//   const [activeTab, setActiveTab] = useState('todo'); // State to track active tab\n\n//   const [newTodo, setNewTodo] = useState({ text: '', dueDate: '', priority: 'Medium' });\n//   const [newReminder, setNewReminder] = useState({ text: '', date: '', recurring: false });\n//   const [newTransaction, setNewTransaction] = useState({ amount: '', description: '', category: 'Expense', date: '' });\n\n//   const [sortedTodos, setSortedTodos] = useState([]);\n//   const [filter, setFilter] = useState('All'); // Filter for todos\n\n//   // Fetch the contact data when component loads\n//   useEffect(() => {\n//     fetchContact(id).then(setContact);\n//   }, [id]);\n\n//   // Check if contact is available before attempting to access its properties\n//   if (!contact) {\n//     return <div>Loading...</div>; // Display loading message while contact data is being fetched\n//   }\n\n//   // Handle Todo actions\n//   const handleAddTodo = async () => {\n//     const { text, dueDate, priority } = newTodo;\n//     if (!text || !dueDate) return;\n\n//     const response = await axios.post(`/api/contacts/${id}/todos`, { text, dueDate, priority });\n//     setContact({ ...contact, todos: [...contact.todos, response.data] });\n//     setNewTodo({ text: '', dueDate: '', priority: 'Medium' }); // Reset form\n//   };\n\n//   const handleDeleteTodo = async (todoId) => {\n//     await axios.delete(`/api/contacts/${id}/todos/${todoId}`);\n//     setContact({ ...contact, todos: contact.todos.filter(todo => todo._id !== todoId) });\n//   };\n\n//   const handleToggleComplete = async (todoId) => {\n//     const todo = contact.todos.find(todo => todo._id === todoId);\n//     const updatedTodo = { ...todo, completed: !todo.completed };\n//     await axios.put(`/api/contacts/${id}/todos/${todoId}`, updatedTodo);\n//     setContact({\n//       ...contact,\n//       todos: contact.todos.map(todo => (todo._id === todoId ? updatedTodo : todo))\n//     });\n//   };\n\n//   // Handle Reminder actions\n//   const handleAddReminder = async () => {\n//     const { text, date, recurring } = newReminder;\n//     if (!text || !date) return;\n\n//     const response = await axios.post(`/api/contacts/${id}/reminders`, { text, date, recurring });\n//     setContact({ ...contact, reminders: [...contact.reminders, response.data] });\n//     setNewReminder({ text: '', date: '', recurring: false }); // Reset form\n//   };\n\n//   const handleDeleteReminder = async (reminderId) => {\n//     await axios.delete(`/api/contacts/${id}/reminders/${reminderId}`);\n//     setContact({\n//       ...contact,\n//       reminders: contact.reminders.filter(reminder => reminder._id !== reminderId)\n//     });\n//   };\n\n//   // Handle Finance actions\n//   const handleAddTransaction = async () => {\n//     const { amount, description, category, date } = newTransaction;\n//     if (!amount || !description || !date) return;\n\n//     const response = await axios.post(`/api/contacts/${id}/finance`, { amount, description, category, date });\n//     setContact({ ...contact, transactions: [...contact.transactions, response.data] });\n//     setNewTransaction({ amount: '', description: '', category: 'Expense', date: '' }); // Reset form\n//   };\n\n//   const handleDeleteTransaction = async (transactionId) => {\n//     await axios.delete(`/api/contacts/${id}/finance/${transactionId}`);\n//     setContact({\n//       ...contact,\n//       transactions: contact.transactions.filter(transaction => transaction._id !== transactionId)\n//     });\n//   };\n\n//   // Sorting todos by due date\n//   const handleSortTodos = () => {\n//     const sorted = [...contact.todos].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n//     setSortedTodos(sorted);\n//   };\n\n//   // Filtering todos by priority\n//   const handleFilterTodos = (priority) => {\n//     setFilter(priority);\n//     const filtered = priority === 'All' ? contact.todos : contact.todos.filter(todo => todo.priority === priority);\n//     setSortedTodos(filtered);\n//   };\n\n//   return (\n//     <div className=\"individual-contact\">\n//       <header className=\"header\">\n//         <button className=\"back-button\" onClick={() => window.history.back()}>← Contacts</button>\n//       </header>\n//       <div className=\"contact-summary\">\n//         <div className=\"contact-photo\">\n//           <i className=\"bi bi-person-circle\"></i>\n//         </div>\n//         <h2>{contact.name || \"Contact\"}</h2>\n//       </div>\n\n//       <div className=\"tab-bar\">\n//         <button className={`tab ${activeTab === 'todo' ? 'active' : ''}`} onClick={() => setActiveTab('todo')}>\n//           <FaCheckSquare className=\"icon\" /> Todo\n//         </button>\n//         <button className={`tab ${activeTab === 'reminder' ? 'active' : ''}`} onClick={() => setActiveTab('reminder')}>\n//           <FaBell className=\"icon\" /> Reminder\n//         </button>\n//         <button className={`tab ${activeTab === 'finance' ? 'active' : ''}`} onClick={() => setActiveTab('finance')}>\n//           <FaMoneyBillWave className=\"icon\" /> Finance\n//         </button>\n//       </div>\n\n//       <div className=\"tab-content\">\n//         {activeTab === 'todo' && (\n//           <div className=\"todo-content\">\n//             <button className=\"add-button\" onClick={handleAddTodo}>+ Add New Todo</button>\n//             {contact.todos && contact.todos.length > 0 && (\n//               <div>\n//                 <button onClick={handleSortTodos}>Sort by Due Date</button>\n//                 <select onChange={(e) => handleFilterTodos(e.target.value)}>\n//                   <option value=\"All\">All</option>\n//                   <option value=\"Low\">Low</option>\n//                   <option value=\"Medium\">Medium</option>\n//                   <option value=\"High\">High</option>\n//                 </select>\n//                 <ul>\n//                   {sortedTodos.map(todo => (\n//                     <li key={todo._id}>\n//                       {todo.text} - {todo.dueDate} - {todo.priority}\n//                       <button onClick={() => handleToggleComplete(todo._id)}>\n//                         {todo.completed ? 'Mark Incomplete' : 'Mark Complete'}\n//                       </button>\n//                       <button onClick={() => handleDeleteTodo(todo._id)}>Delete</button>\n//                     </li>\n//                   ))}\n//                 </ul>\n//               </div>\n//             )}\n//           </div>\n//         )}\n\n//         {activeTab === 'reminder' && (\n//           <div className=\"reminder-content\">\n//             <button className=\"add-button\" onClick={handleAddReminder}>+ Add New Reminder</button>\n//             {contact.reminders && contact.reminders.length > 0 && (\n//               <ul>\n//                 {contact.reminders.map(reminder => (\n//                   <li key={reminder._id}>\n//                     {reminder.text} - {reminder.date} - {reminder.recurring ? 'Recurring' : 'One-time'}\n//                     <button onClick={() => handleDeleteReminder(reminder._id)}>Delete</button>\n//                   </li>\n//                 ))}\n//               </ul>\n//             )}\n//           </div>\n//         )}\n\n//         {activeTab === 'finance' && (\n//           <div className=\"finance-content\">\n//             <button className=\"add-button\" onClick={handleAddTransaction}>+ Add New Transaction</button>\n//             {contact.transactions && contact.transactions.length > 0 && (\n//               <ul>\n//                 {contact.transactions.map(transaction => (\n//                   <li key={transaction._id}>\n//                     {transaction.description} - {transaction.amount} - {transaction.category}\n//                     <button onClick={() => handleDeleteTransaction(transaction._id)}>Delete</button>\n//                   </li>\n//                 ))}\n//               </ul>\n//             )}\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default IndividualContact;\n\n// src/IndividualContact.js\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IndividualContact = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [contact, setContact] = useState(null);\n  const [newTodo, setNewTodo] = useState({\n    text: '',\n    dueDate: '',\n    priority: 'Medium'\n  });\n  const [newReminder, setNewReminder] = useState({\n    text: '',\n    date: '',\n    recurring: false\n  });\n  const [newTransaction, setNewTransaction] = useState({\n    amount: '',\n    description: '',\n    category: '',\n    date: ''\n  });\n  const [sortedTodos, setSortedTodos] = useState([]);\n\n  // Fetch contact details\n  const fetchContact = async id => {\n    try {\n      const response = await axios.get(`/api/contacts/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error fetching contact:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchContact(id).then(setContact);\n  }, [id]);\n\n  // Handle Add Todo\n  const handleAddTodo = async () => {\n    const {\n      text,\n      dueDate,\n      priority\n    } = newTodo;\n    if (!text || !dueDate) return;\n    const response = await axios.post(`/api/contacts/${id}/todos`, {\n      text,\n      dueDate,\n      priority\n    });\n    const updatedContact = await fetchContact(id);\n    setContact(updatedContact);\n    setNewTodo({\n      text: '',\n      dueDate: '',\n      priority: 'Medium'\n    }); // Reset form\n  };\n\n  // Handle Sort Todos\n  const handleSortTodos = () => {\n    const sorted = [...contact.todos].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\n    setSortedTodos(sorted);\n  };\n\n  // Handle Filter Todos by Priority\n  const handleFilterTodos = priority => {\n    if (priority === 'All') {\n      setSortedTodos(contact.todos);\n    } else {\n      const filteredTodos = contact.todos.filter(todo => todo.priority === priority);\n      setSortedTodos(filteredTodos);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: contact && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: contact.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: contact.category\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Todo text\",\n          value: newTodo.text,\n          onChange: e => setNewTodo({\n            ...newTodo,\n            text: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 680,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"datetime-local\",\n          value: newTodo.dueDate,\n          onChange: e => setNewTodo({\n            ...newTodo,\n            dueDate: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 686,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: newTodo.priority,\n          onChange: e => setNewTodo({\n            ...newTodo,\n            priority: e.target.value\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Low\",\n            children: \"Low\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 695,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Medium\",\n            children: \"Medium\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 696,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"High\",\n            children: \"High\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 697,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 691,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddTodo,\n          children: \"Add Todo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 699,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSortTodos,\n          children: \"Sort by Due Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 704,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => handleFilterTodos(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"All\",\n            children: \"All\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 706,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Low\",\n            children: \"Low\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 707,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Medium\",\n            children: \"Medium\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 708,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"High\",\n            children: \"High\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 709,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 705,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 703,\n        columnNumber: 11\n      }, this), sortedTodos && sortedTodos.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: sortedTodos.map(todo => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: todo.text\n        }, todo._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 717,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 715,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 674,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 672,\n    columnNumber: 5\n  }, this);\n};\n_s(IndividualContact, \"GuWhN6CE931IDKLcMUwi11wMNlk=\", false, function () {\n  return [useParams];\n});\n_c = IndividualContact;\nexport default IndividualContact;\nvar _c;\n$RefreshReg$(_c, \"IndividualContact\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useParams","axios","jsxDEV","_jsxDEV","IndividualContact","_s","id","contact","setContact","newTodo","setNewTodo","text","dueDate","priority","newReminder","setNewReminder","date","recurring","newTransaction","setNewTransaction","amount","description","category","sortedTodos","setSortedTodos","fetchContact","response","get","data","error","console","then","handleAddTodo","post","updatedContact","handleSortTodos","sorted","todos","sort","a","b","Date","handleFilterTodos","filteredTodos","filter","todo","children","name","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","length","map","_id","_c","$RefreshReg$"],"sources":["D:/PeoplePixel1/src/IndividualContact.js"],"sourcesContent":["\r\n// // src/IndividualContact.js\r\n// import React, { useState } from 'react';\r\n// import { useLocation, Link } from 'react-router-dom';\r\n// import './styles.css';\r\n// import { FaCheckSquare, FaBell, FaMoneyBillWave } from 'react-icons/fa';\r\n// import Contacts from './Contacts';\r\n\r\n// const IndividualContact = () => {\r\n//   const location = useLocation();\r\n//   const params = new URLSearchParams(location.search);\r\n//   const name = params.get('name'); // Get the contact name from URL\r\n//   const avatar = params.get('avatar'); // Get the contact avatar\r\n\r\n//   const [activeTab, setActiveTab] = useState('todo'); // State to track active tab\r\n//   const [todos, setTodos] = useState([{ text: \"Complete Today's Task\" }, { text: \"Schedule meeting\" }]); // Sample todo data\r\n//   const [reminders, setReminders] = useState([]); // Sample reminder data\r\n//   const [transactions, setTransactions] = useState([]); // Sample transaction data\r\n\r\n//   return (\r\n//     <div className=\"individual-contact\">\r\n//       <header className=\"header\">\r\n//         {/* <button className=\"back-button\">← Contacts</button> */}\r\n//         <button className=\"back-button\" onClick={() => window.history.back()}>← Contacts</button>\r\n\r\n//         {/* <h1 className=\"title\">Contact</h1> */}\r\n//       </header>\r\n//       <div className=\"contact-summary\">\r\n//         <div className=\"contact-photo\">\r\n//           <i className=\"bi bi-person-circle\"></i>\r\n//         </div>\r\n//         <h2>{name || \"Contact\"}</h2>\r\n//       </div>\r\n//       <div className=\"tab-bar\">\r\n//         <button\r\n//           className={`tab ${activeTab === 'todo' ? 'active' : ''}`}\r\n//           onClick={() => setActiveTab('todo')}\r\n//         >\r\n//           <FaCheckSquare className=\"icon\" /> Todo\r\n//         </button>\r\n//         <button\r\n//           className={`tab ${activeTab === 'reminder' ? 'active' : ''}`}\r\n//           onClick={() => setActiveTab('reminder')}\r\n//         >\r\n//           <FaBell className=\"icon\" /> Reminder\r\n//         </button>\r\n//         <button\r\n//           className={`tab ${activeTab === 'finance' ? 'active' : ''}`}\r\n//           onClick={() => setActiveTab('finance')}\r\n//         >\r\n//           <FaMoneyBillWave className=\"icon\" /> Finance\r\n//         </button>\r\n//       </div>\r\n//       <div className=\"tab-content\">\r\n//         {activeTab === 'todo' && (\r\n//           <div className=\"todo-content\">\r\n//             {todos.map((todo, index) => (\r\n//               <div key={index} className=\"list-item\">\r\n//                 <span>{todo.text}</span>\r\n//                 <FaCheckSquare className=\"status-icon\" />\r\n//               </div>\r\n//             ))}\r\n//             <button className=\"add-button\">+ Add New Todo</button>\r\n//           </div>\r\n//         )}\r\n//         {activeTab === 'reminder' && (\r\n//           <div className=\"reminder-content\">\r\n//             <button className=\"add-button\">+ Add New Reminder</button>\r\n//           </div>\r\n//         )}\r\n//         {activeTab === 'finance' && (\r\n//           <div className=\"finance-content\">\r\n//             <button className=\"add-button\">+ Add New Transaction</button>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default IndividualContact;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // src/IndividualContact.js\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useLocation, useNavigate } from 'react-router-dom';\r\n// import './styles.css';\r\n// import { FaCheckSquare, FaBell, FaMoneyBillWave } from 'react-icons/fa';\r\n// // import { getContactById, updateContact, deleteContact } from '../api';\r\n// import { getContactById, updateContact, deleteContact } from './api'; // relative to src/\r\n\r\n// const IndividualContact = () => {\r\n//   const location = useLocation();\r\n//   const navigate = useNavigate();\r\n//   const params = new URLSearchParams(location.search);\r\n//   const contactId = params.get('id'); // Assuming ID is passed in URL as 'id'\r\n\r\n//   const [contact, setContact] = useState(null);\r\n//   const [activeTab, setActiveTab] = useState('todo');\r\n//   const [todos, setTodos] = useState([]);\r\n//   const [reminders, setReminders] = useState([]);\r\n//   const [transactions, setTransactions] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     // Fetch the contact data by ID\r\n//     const fetchContact = async () => {\r\n//       try {\r\n//         const data = await getContactById(contactId);\r\n//         setContact(data);\r\n//         setTodos(data.todos || []);\r\n//         setReminders(data.reminders || []);\r\n//         setTransactions(data.transactions || []);\r\n//       } catch (error) {\r\n//         console.error('Error fetching contact data:', error);\r\n//       }\r\n//     };\r\n//     fetchContact();\r\n//   }, [contactId]);\r\n\r\n//   const handleAddTodo = () => {\r\n//     const newTodo = prompt('Enter new todo:');\r\n//     if (newTodo) {\r\n//       const updatedTodos = [...todos, { text: newTodo }];\r\n//       setTodos(updatedTodos);\r\n//       updateContact(contactId, { ...contact, todos: updatedTodos });\r\n//     }\r\n//   };\r\n\r\n//   const handleAddReminder = () => {\r\n//     const newReminder = prompt('Enter new reminder:');\r\n//     if (newReminder) {\r\n//       const updatedReminders = [...reminders, { text: newReminder }];\r\n//       setReminders(updatedReminders);\r\n//       updateContact(contactId, { ...contact, reminders: updatedReminders });\r\n//     }\r\n//   };\r\n\r\n//   const handleAddTransaction = () => {\r\n//     const newTransaction = prompt('Enter new transaction:');\r\n//     if (newTransaction) {\r\n//       const updatedTransactions = [...transactions, { text: newTransaction }];\r\n//       setTransactions(updatedTransactions);\r\n//       updateContact(contactId, { ...contact, transactions: updatedTransactions });\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"individual-contact\">\r\n//       <header className=\"header\">\r\n//         <button className=\"back-button\" onClick={() => navigate(-1)}>← Contacts</button>\r\n//       </header>\r\n      \r\n//       <div className=\"contact-summary\">\r\n//         <div className=\"contact-photo\">\r\n//           {contact ? contact.avatar : <i className=\"bi bi-person-circle\"></i>}\r\n//         </div>\r\n//         <h2>{contact ? contact.name : \"Contact\"}</h2>\r\n//       </div>\r\n\r\n//       <div className=\"tab-bar\">\r\n//         <button\r\n//           className={`tab ${activeTab === 'todo' ? 'active' : ''}`}\r\n//           onClick={() => setActiveTab('todo')}\r\n//         >\r\n//           <FaCheckSquare className=\"icon\" /> Todo\r\n//         </button>\r\n//         <button\r\n//           className={`tab ${activeTab === 'reminder' ? 'active' : ''}`}\r\n//           onClick={() => setActiveTab('reminder')}\r\n//         >\r\n//           <FaBell className=\"icon\" /> Reminder\r\n//         </button>\r\n//         <button\r\n//           className={`tab ${activeTab === 'finance' ? 'active' : ''}`}\r\n//           onClick={() => setActiveTab('finance')}\r\n//         >\r\n//           <FaMoneyBillWave className=\"icon\" /> Finance\r\n//         </button>\r\n//       </div>\r\n\r\n//       <div className=\"tab-content\">\r\n//         {activeTab === 'todo' && (\r\n//           <div className=\"todo-content\">\r\n//             {todos.map((todo, index) => (\r\n//               <div key={index} className=\"list-item\">\r\n//                 <span>{todo.text}</span>\r\n//                 <FaCheckSquare className=\"status-icon\" />\r\n//               </div>\r\n//             ))}\r\n//             <button className=\"add-button\" onClick={handleAddTodo}>+ Add New Todo</button>\r\n//           </div>\r\n//         )}\r\n//         {activeTab === 'reminder' && (\r\n//           <div className=\"reminder-content\">\r\n//             {reminders.map((reminder, index) => (\r\n//               <div key={index} className=\"list-item\">\r\n//                 <span>{reminder.text}</span>\r\n//                 <FaBell className=\"status-icon\" />\r\n//               </div>\r\n//             ))}\r\n//             <button className=\"add-button\" onClick={handleAddReminder}>+ Add New Reminder</button>\r\n//           </div>\r\n//         )}\r\n//         {activeTab === 'finance' && (\r\n//           <div className=\"finance-content\">\r\n//             {transactions.map((transaction, index) => (\r\n//               <div key={index} className=\"list-item\">\r\n//                 <span>{transaction.text}</span>\r\n//                 <FaMoneyBillWave className=\"status-icon\" />\r\n//               </div>\r\n//             ))}\r\n//             <button className=\"add-button\" onClick={handleAddTransaction}>+ Add New Transaction</button>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default IndividualContact;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // src/IndividualContact.js\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useLocation, Link } from 'react-router-dom';\r\n// import axios from 'axios';\r\n// import './styles.css';\r\n// import { FaCheckSquare, FaBell, FaMoneyBillWave } from 'react-icons/fa';\r\n\r\n// const API_URL = 'http://localhost:5000/api'; // Backend API URL\r\n\r\n// const IndividualContact = () => {\r\n//   const location = useLocation();\r\n//   const params = new URLSearchParams(location.search);\r\n//   const contactId = params.get('id'); // Get the contact ID from URL\r\n//   const name = params.get('name'); // Get the contact name\r\n//   const avatar = params.get('avatar'); // Get the contact avatar\r\n\r\n//   // State management\r\n//   const [activeTab, setActiveTab] = useState('todo');\r\n//   const [todos, setTodos] = useState([]);\r\n//   const [reminders, setReminders] = useState([]);\r\n//   const [transactions, setTransactions] = useState([]);\r\n\r\n//   // Fetch data for todos, reminders, and transactions\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const todosRes = await axios.get(`${API_URL}/contacts/${contactId}/todos`);\r\n//         setTodos(todosRes.data);\r\n\r\n//         const remindersRes = await axios.get(`${API_URL}/contacts/${contactId}/reminders`);\r\n//         setReminders(remindersRes.data);\r\n\r\n//         const transactionsRes = await axios.get(`${API_URL}/contacts/${contactId}/finance`);\r\n//         setTransactions(transactionsRes.data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching data:', error);\r\n//       }\r\n//     };\r\n//     fetchData();\r\n//   }, [contactId]);\r\n\r\n//   // Add Todo\r\n//   const addTodo = async (todoData) => {\r\n//     try {\r\n//       const response = await axios.post(`${API_URL}/contacts/${contactId}/todos`, todoData);\r\n//       setTodos([...todos, response.data]);\r\n//     } catch (error) {\r\n//       console.error('Error adding todo:', error);\r\n//     }\r\n//   };\r\n\r\n//   // Edit Todo\r\n//   const editTodo = async (todoId, updatedTodoData) => {\r\n//     try {\r\n//       const response = await axios.put(`${API_URL}/contacts/${contactId}/todos/${todoId}`, updatedTodoData);\r\n//       const updatedTodos = todos.map(todo =>\r\n//         todo._id === todoId ? { ...todo, ...updatedTodoData } : todo\r\n//       );\r\n//       setTodos(updatedTodos);\r\n//     } catch (error) {\r\n//       console.error('Error editing todo:', error);\r\n//     }\r\n//   };\r\n\r\n//   // Delete Todo\r\n//   const deleteTodo = async (todoId) => {\r\n//     try {\r\n//       await axios.delete(`${API_URL}/contacts/${contactId}/todos/${todoId}`);\r\n//       setTodos(todos.filter(todo => todo._id !== todoId));\r\n//     } catch (error) {\r\n//       console.error('Error deleting todo:', error);\r\n//     }\r\n//   };\r\n\r\n//   // Mark Todo as Complete\r\n//   const toggleTodoComplete = async (todoId) => {\r\n//     try {\r\n//       const todoToUpdate = todos.find(todo => todo._id === todoId);\r\n//       const updatedTodo = { ...todoToUpdate, completed: !todoToUpdate.completed };\r\n//       await axios.put(`${API_URL}/contacts/${contactId}/todos/${todoId}`, updatedTodo);\r\n//       setTodos(todos.map(todo => (todo._id === todoId ? updatedTodo : todo)));\r\n//     } catch (error) {\r\n//       console.error('Error toggling todo complete:', error);\r\n//     }\r\n//   };\r\n\r\n//   // Add Reminder\r\n//   const addReminder = async (reminderData) => {\r\n//     try {\r\n//       const response = await axios.post(`${API_URL}/contacts/${contactId}/reminders`, reminderData);\r\n//       setReminders([...reminders, response.data]);\r\n//     } catch (error) {\r\n//       console.error('Error adding reminder:', error);\r\n//     }\r\n//   };\r\n\r\n//   // Add Finance Transaction\r\n//   const addTransaction = async (transactionData) => {\r\n//     try {\r\n//       const response = await axios.post(`${API_URL}/contacts/${contactId}/finance`, transactionData);\r\n//       setTransactions([...transactions, response.data]);\r\n//     } catch (error) {\r\n//       console.error('Error adding transaction:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"individual-contact\">\r\n//       <header className=\"header\">\r\n//         <button className=\"back-button\" onClick={() => window.history.back()}>← Contacts</button>\r\n//       </header>\r\n//       <div className=\"contact-summary\">\r\n//         <div className=\"contact-photo\">\r\n//           <i className=\"bi bi-person-circle\"></i>\r\n//         </div>\r\n//         <h2>{name || \"Contact\"}</h2>\r\n//       </div>\r\n\r\n//       <div className=\"tab-bar\">\r\n//         <button className={`tab ${activeTab === 'todo' ? 'active' : ''}`} onClick={() => setActiveTab('todo')}>\r\n//           <FaCheckSquare className=\"icon\" /> Todo\r\n//         </button>\r\n//         <button className={`tab ${activeTab === 'reminder' ? 'active' : ''}`} onClick={() => setActiveTab('reminder')}>\r\n//           <FaBell className=\"icon\" /> Reminder\r\n//         </button>\r\n//         <button className={`tab ${activeTab === 'finance' ? 'active' : ''}`} onClick={() => setActiveTab('finance')}>\r\n//           <FaMoneyBillWave className=\"icon\" /> Finance\r\n//         </button>\r\n//       </div>\r\n\r\n//       <div className=\"tab-content\">\r\n//         {activeTab === 'todo' && (\r\n//           <div className=\"todo-content\">\r\n//             {todos.map((todo) => (\r\n//               <div key={todo._id} className=\"list-item\">\r\n//                 <span>{todo.text}</span>\r\n//                 <button onClick={() => toggleTodoComplete(todo._id)}>{todo.completed ? 'Unmark' : 'Complete'}</button>\r\n//                 <button onClick={() => deleteTodo(todo._id)}>Delete</button>\r\n//               </div>\r\n//             ))}\r\n//             <button className=\"add-button\" onClick={() => addTodo({ text: 'New Todo', completed: false })}>+ Add New Todo</button>\r\n//           </div>\r\n//         )}\r\n\r\n//         {activeTab === 'reminder' && (\r\n//           <div className=\"reminder-content\">\r\n//             <button className=\"add-button\" onClick={() => addReminder({ text: 'New Reminder' })}>+ Add New Reminder</button>\r\n//           </div>\r\n//         )}\r\n\r\n//         {activeTab === 'finance' && (\r\n//           <div className=\"finance-content\">\r\n//             <button className=\"add-button\" onClick={() => addTransaction({ amount: 100, category: 'expense' })}>+ Add New Transaction</button>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default IndividualContact;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // src/IndividualContact.js\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useLocation, useParams } from 'react-router-dom';\r\n// import axios from 'axios';\r\n// import './styles.css';\r\n// import { FaCheckSquare, FaBell, FaMoneyBillWave } from 'react-icons/fa';\r\n\r\n// // Helper function to fetch the contact data by ID\r\n// const fetchContact = async (id) => {\r\n//   const response = await axios.get(`/api/contacts/${id}`);\r\n//   return response.data;\r\n// };\r\n\r\n// const IndividualContact = () => {\r\n//   const location = useLocation();\r\n//   const { id } = useParams(); // Contact ID from URL\r\n//   const [contact, setContact] = useState(null); // Initialize contact as null\r\n//   const [activeTab, setActiveTab] = useState('todo'); // State to track active tab\r\n\r\n//   const [newTodo, setNewTodo] = useState({ text: '', dueDate: '', priority: 'Medium' });\r\n//   const [newReminder, setNewReminder] = useState({ text: '', date: '', recurring: false });\r\n//   const [newTransaction, setNewTransaction] = useState({ amount: '', description: '', category: 'Expense', date: '' });\r\n\r\n//   const [sortedTodos, setSortedTodos] = useState([]);\r\n//   const [filter, setFilter] = useState('All'); // Filter for todos\r\n\r\n//   // Fetch the contact data when component loads\r\n//   useEffect(() => {\r\n//     fetchContact(id).then(setContact);\r\n//   }, [id]);\r\n\r\n//   // Check if contact is available before attempting to access its properties\r\n//   if (!contact) {\r\n//     return <div>Loading...</div>; // Display loading message while contact data is being fetched\r\n//   }\r\n\r\n//   // Handle Todo actions\r\n//   const handleAddTodo = async () => {\r\n//     const { text, dueDate, priority } = newTodo;\r\n//     if (!text || !dueDate) return;\r\n\r\n//     const response = await axios.post(`/api/contacts/${id}/todos`, { text, dueDate, priority });\r\n//     setContact({ ...contact, todos: [...contact.todos, response.data] });\r\n//     setNewTodo({ text: '', dueDate: '', priority: 'Medium' }); // Reset form\r\n//   };\r\n\r\n//   const handleDeleteTodo = async (todoId) => {\r\n//     await axios.delete(`/api/contacts/${id}/todos/${todoId}`);\r\n//     setContact({ ...contact, todos: contact.todos.filter(todo => todo._id !== todoId) });\r\n//   };\r\n\r\n//   const handleToggleComplete = async (todoId) => {\r\n//     const todo = contact.todos.find(todo => todo._id === todoId);\r\n//     const updatedTodo = { ...todo, completed: !todo.completed };\r\n//     await axios.put(`/api/contacts/${id}/todos/${todoId}`, updatedTodo);\r\n//     setContact({\r\n//       ...contact,\r\n//       todos: contact.todos.map(todo => (todo._id === todoId ? updatedTodo : todo))\r\n//     });\r\n//   };\r\n\r\n//   // Handle Reminder actions\r\n//   const handleAddReminder = async () => {\r\n//     const { text, date, recurring } = newReminder;\r\n//     if (!text || !date) return;\r\n\r\n//     const response = await axios.post(`/api/contacts/${id}/reminders`, { text, date, recurring });\r\n//     setContact({ ...contact, reminders: [...contact.reminders, response.data] });\r\n//     setNewReminder({ text: '', date: '', recurring: false }); // Reset form\r\n//   };\r\n\r\n//   const handleDeleteReminder = async (reminderId) => {\r\n//     await axios.delete(`/api/contacts/${id}/reminders/${reminderId}`);\r\n//     setContact({\r\n//       ...contact,\r\n//       reminders: contact.reminders.filter(reminder => reminder._id !== reminderId)\r\n//     });\r\n//   };\r\n\r\n//   // Handle Finance actions\r\n//   const handleAddTransaction = async () => {\r\n//     const { amount, description, category, date } = newTransaction;\r\n//     if (!amount || !description || !date) return;\r\n\r\n//     const response = await axios.post(`/api/contacts/${id}/finance`, { amount, description, category, date });\r\n//     setContact({ ...contact, transactions: [...contact.transactions, response.data] });\r\n//     setNewTransaction({ amount: '', description: '', category: 'Expense', date: '' }); // Reset form\r\n//   };\r\n\r\n//   const handleDeleteTransaction = async (transactionId) => {\r\n//     await axios.delete(`/api/contacts/${id}/finance/${transactionId}`);\r\n//     setContact({\r\n//       ...contact,\r\n//       transactions: contact.transactions.filter(transaction => transaction._id !== transactionId)\r\n//     });\r\n//   };\r\n\r\n//   // Sorting todos by due date\r\n//   const handleSortTodos = () => {\r\n//     const sorted = [...contact.todos].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\r\n//     setSortedTodos(sorted);\r\n//   };\r\n\r\n//   // Filtering todos by priority\r\n//   const handleFilterTodos = (priority) => {\r\n//     setFilter(priority);\r\n//     const filtered = priority === 'All' ? contact.todos : contact.todos.filter(todo => todo.priority === priority);\r\n//     setSortedTodos(filtered);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"individual-contact\">\r\n//       <header className=\"header\">\r\n//         <button className=\"back-button\" onClick={() => window.history.back()}>← Contacts</button>\r\n//       </header>\r\n//       <div className=\"contact-summary\">\r\n//         <div className=\"contact-photo\">\r\n//           <i className=\"bi bi-person-circle\"></i>\r\n//         </div>\r\n//         <h2>{contact.name || \"Contact\"}</h2>\r\n//       </div>\r\n\r\n//       <div className=\"tab-bar\">\r\n//         <button className={`tab ${activeTab === 'todo' ? 'active' : ''}`} onClick={() => setActiveTab('todo')}>\r\n//           <FaCheckSquare className=\"icon\" /> Todo\r\n//         </button>\r\n//         <button className={`tab ${activeTab === 'reminder' ? 'active' : ''}`} onClick={() => setActiveTab('reminder')}>\r\n//           <FaBell className=\"icon\" /> Reminder\r\n//         </button>\r\n//         <button className={`tab ${activeTab === 'finance' ? 'active' : ''}`} onClick={() => setActiveTab('finance')}>\r\n//           <FaMoneyBillWave className=\"icon\" /> Finance\r\n//         </button>\r\n//       </div>\r\n\r\n//       <div className=\"tab-content\">\r\n//         {activeTab === 'todo' && (\r\n//           <div className=\"todo-content\">\r\n//             <button className=\"add-button\" onClick={handleAddTodo}>+ Add New Todo</button>\r\n//             {contact.todos && contact.todos.length > 0 && (\r\n//               <div>\r\n//                 <button onClick={handleSortTodos}>Sort by Due Date</button>\r\n//                 <select onChange={(e) => handleFilterTodos(e.target.value)}>\r\n//                   <option value=\"All\">All</option>\r\n//                   <option value=\"Low\">Low</option>\r\n//                   <option value=\"Medium\">Medium</option>\r\n//                   <option value=\"High\">High</option>\r\n//                 </select>\r\n//                 <ul>\r\n//                   {sortedTodos.map(todo => (\r\n//                     <li key={todo._id}>\r\n//                       {todo.text} - {todo.dueDate} - {todo.priority}\r\n//                       <button onClick={() => handleToggleComplete(todo._id)}>\r\n//                         {todo.completed ? 'Mark Incomplete' : 'Mark Complete'}\r\n//                       </button>\r\n//                       <button onClick={() => handleDeleteTodo(todo._id)}>Delete</button>\r\n//                     </li>\r\n//                   ))}\r\n//                 </ul>\r\n//               </div>\r\n//             )}\r\n//           </div>\r\n//         )}\r\n\r\n//         {activeTab === 'reminder' && (\r\n//           <div className=\"reminder-content\">\r\n//             <button className=\"add-button\" onClick={handleAddReminder}>+ Add New Reminder</button>\r\n//             {contact.reminders && contact.reminders.length > 0 && (\r\n//               <ul>\r\n//                 {contact.reminders.map(reminder => (\r\n//                   <li key={reminder._id}>\r\n//                     {reminder.text} - {reminder.date} - {reminder.recurring ? 'Recurring' : 'One-time'}\r\n//                     <button onClick={() => handleDeleteReminder(reminder._id)}>Delete</button>\r\n//                   </li>\r\n//                 ))}\r\n//               </ul>\r\n//             )}\r\n//           </div>\r\n//         )}\r\n\r\n//         {activeTab === 'finance' && (\r\n//           <div className=\"finance-content\">\r\n//             <button className=\"add-button\" onClick={handleAddTransaction}>+ Add New Transaction</button>\r\n//             {contact.transactions && contact.transactions.length > 0 && (\r\n//               <ul>\r\n//                 {contact.transactions.map(transaction => (\r\n//                   <li key={transaction._id}>\r\n//                     {transaction.description} - {transaction.amount} - {transaction.category}\r\n//                     <button onClick={() => handleDeleteTransaction(transaction._id)}>Delete</button>\r\n//                   </li>\r\n//                 ))}\r\n//               </ul>\r\n//             )}\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default IndividualContact;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// src/IndividualContact.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nconst IndividualContact = () => {\r\n  const { id } = useParams();\r\n  const [contact, setContact] = useState(null);\r\n  const [newTodo, setNewTodo] = useState({ text: '', dueDate: '', priority: 'Medium' });\r\n  const [newReminder, setNewReminder] = useState({ text: '', date: '', recurring: false });\r\n  const [newTransaction, setNewTransaction] = useState({ amount: '', description: '', category: '', date: '' });\r\n  const [sortedTodos, setSortedTodos] = useState([]);\r\n\r\n  // Fetch contact details\r\n  const fetchContact = async (id) => {\r\n    try {\r\n      const response = await axios.get(`/api/contacts/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error fetching contact:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchContact(id).then(setContact);\r\n  }, [id]);\r\n\r\n  // Handle Add Todo\r\n  const handleAddTodo = async () => {\r\n    const { text, dueDate, priority } = newTodo;\r\n    if (!text || !dueDate) return;\r\n\r\n    const response = await axios.post(`/api/contacts/${id}/todos`, { text, dueDate, priority });\r\n    const updatedContact = await fetchContact(id);\r\n    setContact(updatedContact); \r\n    setNewTodo({ text: '', dueDate: '', priority: 'Medium' }); // Reset form\r\n  };\r\n\r\n  // Handle Sort Todos\r\n  const handleSortTodos = () => {\r\n    const sorted = [...contact.todos].sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));\r\n    setSortedTodos(sorted);\r\n  };\r\n\r\n  // Handle Filter Todos by Priority\r\n  const handleFilterTodos = (priority) => {\r\n    if (priority === 'All') {\r\n      setSortedTodos(contact.todos);\r\n    } else {\r\n      const filteredTodos = contact.todos.filter(todo => todo.priority === priority);\r\n      setSortedTodos(filteredTodos);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {contact && (\r\n        <div>\r\n          <h1>{contact.name}</h1>\r\n          <h3>{contact.category}</h3>\r\n\r\n          {/* Add Todo Form */}\r\n          <div>\r\n            <input \r\n              type=\"text\"\r\n              placeholder=\"Todo text\"\r\n              value={newTodo.text}\r\n              onChange={(e) => setNewTodo({ ...newTodo, text: e.target.value })}\r\n            />\r\n            <input \r\n              type=\"datetime-local\"\r\n              value={newTodo.dueDate}\r\n              onChange={(e) => setNewTodo({ ...newTodo, dueDate: e.target.value })}\r\n            />\r\n            <select \r\n              value={newTodo.priority}\r\n              onChange={(e) => setNewTodo({ ...newTodo, priority: e.target.value })}\r\n            >\r\n              <option value=\"Low\">Low</option>\r\n              <option value=\"Medium\">Medium</option>\r\n              <option value=\"High\">High</option>\r\n            </select>\r\n            <button onClick={handleAddTodo}>Add Todo</button>\r\n          </div>\r\n\r\n          {/* Sort and Filter Todos */}\r\n          <div>\r\n            <button onClick={handleSortTodos}>Sort by Due Date</button>\r\n            <select onChange={(e) => handleFilterTodos(e.target.value)}>\r\n              <option value=\"All\">All</option>\r\n              <option value=\"Low\">Low</option>\r\n              <option value=\"Medium\">Medium</option>\r\n              <option value=\"High\">High</option>\r\n            </select>\r\n          </div>\r\n\r\n          {/* Todo List */}\r\n          {sortedTodos && sortedTodos.length > 0 && (\r\n            <div>\r\n              {sortedTodos.map(todo => (\r\n                <div key={todo._id}>{todo.text}</div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IndividualContact;\r\n"],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAWA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}