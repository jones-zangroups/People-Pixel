{"ast":null,"code":"var _jsxFileName = \"D:\\\\PeoplePixel1\\\\src\\\\Contacts.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import { useLocation, Link } from 'react-router-dom';\n// import axios from 'axios';\n// import './styles.css';\n\n// function Contacts() {\n//   const location = useLocation();\n//   const params = new URLSearchParams(location.search);\n//   const category = params.get('category');\n//   const [contacts, setContacts] = useState([]);\n//   const [newContactName, setNewContactName] = useState('');\n//   const [newContactAvatar, setNewContactAvatar] = useState('');\n//   const [showForm, setShowForm] = useState(false);\n\n//   useEffect(() => {\n//     const fetchContacts = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:5000/api/contacts');\n//         setContacts(response.data);\n//       } catch (error) {\n//         console.error('Error fetching contacts:', error);\n//       }\n//     };\n\n//     fetchContacts();\n//   }, []);\n\n//   const handleAddContact = async () => {\n//     try {\n//       const newContact = { name: newContactName, avatar: newContactAvatar };\n//       const response = await axios.post('http://localhost:5000/api/contacts', newContact);\n//       setContacts([...contacts, response.data]); // Update contacts state\n//       setNewContactName('');\n//       setNewContactAvatar('');\n//       setShowForm(false); // Hide the form after submission\n//     } catch (error) {\n//       console.error('Error adding contact:', error);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <button onClick={() => setShowForm(!showForm)}>\n//         {showForm ? 'Cancel' : 'Create New Contact'}\n//       </button>\n\n//       {showForm && (\n//         <div className=\"new-contact-form\">\n//           <input\n//             type=\"text\"\n//             placeholder=\"Contact Name\"\n//             value={newContactName}\n//             onChange={(e) => setNewContactName(e.target.value)}\n//           />\n//           <input\n//             type=\"text\"\n//             placeholder=\"Avatar URL\"\n//             value={newContactAvatar}\n//             onChange={(e) => setNewContactAvatar(e.target.value)}\n//           />\n//           <button onClick={handleAddContact}>Save Contact</button>\n//         </div>\n//       )}\n\n//       <div className=\"container\">\n//         {contacts.length > 0 ? (\n//           contacts.map((contact, index) => (\n//             <Link\n//               key={index}\n//               className=\"card\"\n//               to={`/contact?name=${contact.name}&avatar=${contact.avatar}`}\n//             >\n//               <div className=\"avatar\">{contact.avatar}</div>\n//               <p className=\"name\">{contact.name}</p>\n//             </Link>\n//           ))\n//         ) : (\n//           <p className=\"no-contacts\">No contacts found for this category.</p>\n//         )}\n//       </div>\n//     </>\n//   );\n// }\n\n// export default Contacts;\n\n// // src/Contacts.js\n// import React, { useState, useEffect } from 'react';\n// import { useLocation, Link } from 'react-router-dom';\n// import './styles.css';\n// import axios from 'axios';\n\n// const Contacts = () => {\n//   const location = useLocation();\n//   const params = new URLSearchParams(location.search);\n//   const category = params.get('category');\n\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n//   const [newContact, setNewContact] = useState({\n//     name: '',\n//     avatar: '',\n//     email: '',\n//     contact: ''\n//   });\n//   const [contacts, setContacts] = useState([]);\n\n//   // Fetch initial contacts\n//   useEffect(() => {\n//     // Replace with API call if fetching from server\n//     setContacts(contacts[category] || []);\n//   }, [category]);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewContact({ ...newContact, [name]: value });\n//   };\n\n//   const handleAddContact = () => {\n//     if (!newContact.name || !newContact.avatar) {\n//       alert('Please fill in the required fields.');\n//       return;\n//     }\n\n//     // Replace with your backend endpoint\n//     axios.post('http://localhost:5000/api/contacts', newContact)\n//       .then(response => {\n//         console.log('Contact added:', response.data);\n//         setContacts([...contacts, newContact]);\n//         setIsModalOpen(false);\n//       })\n//       .catch(error => {\n//         console.error('There was an error adding the contact!', error);\n//       });\n//   };\n\n//   return (\n//     <>\n//       <header className=\"header\">\n//         <div className=\"logo\">PeoplePixel</div>\n//         <input type=\"text\" placeholder=\"Search...\" className=\"search-bar\" />\n//         <div className=\"profile-icon\">\n//           <i className=\"bi bi-person-circle\"></i>\n//         </div>\n//       </header>\n//       <h2>\n//         <button className=\"back-button\" onClick={() => window.history.back()}>← Contacts</button>\n//       </h2>\n//       <h3>\n//         <button className=\"add-contact\" onClick={() => {\n//           setIsModalOpen(true);\n//           console.log('Add Contact button clicked'); // Debugging line\n//         }}>\n//           Add Contact\n//         </button>\n//       </h3>\n//       <div className=\"container\">\n//         {contacts.length > 0 ? (\n//           contacts.map((contact, index) => (\n//             <Link\n//               key={index}\n//               className=\"card\"\n//               to={`/contact?name=${contact.name}&avatar=${contact.avatar}`}\n//             >\n//               <div className=\"avatar\">{contact.avatar}</div>\n//               <p className=\"name\">{contact.name}</p>\n//             </Link>\n//           ))\n//         ) : (\n//           <p className=\"no-contacts\">No contacts found for this category.</p>\n//         )}\n//       </div>\n\n//       {isModalOpen && (\n//         <div className=\"modal\">\n//           <div className=\"modal-content\">\n//             <h2>Add New Contact</h2>\n//             <form>\n//               <label>Name:</label>\n//               <input type=\"text\" name=\"name\" value={newContact.name} onChange={handleInputChange} required />\n//               <label>Avatar:</label>\n//               <input type=\"text\" name=\"avatar\" value={newContact.avatar} onChange={handleInputChange} required />\n//               <label>Email:</label>\n//               <input type=\"email\" name=\"email\" value={newContact.email} onChange={handleInputChange} />\n//               <label>Contact:</label>\n//               <input type=\"text\" name=\"contact\" value={newContact.contact} onChange={handleInputChange} />\n//             </form>\n//             <button onClick={handleAddContact}>Save</button>\n//             <button onClick={() => {\n//               setIsModalOpen(false);\n//               console.log('Modal closed'); // Debugging line\n//             }}>Cancel</button>\n//           </div>\n//         </div>\n//       )}\n\n//       <footer>\n//         <div className=\"footer-links\">\n//           <a href=\"#\">About</a>\n//           <a href=\"#\">Help</a>\n//           <a href=\"#\">Privacy Policy</a>\n//         </div>\n//         <p className=\"copyright\">&copy; 2024 PeoplePixel. All rights reserved.</p>\n//       </footer>\n//     </>\n//   );\n// };\n\n// export default Contacts;\n\n// // src/Contacts.js\n// import React, { useState, useEffect } from 'react';\n// import { useLocation, Link } from 'react-router-dom';\n// import './styles.css';\n// import axios from 'axios';\n\n// const Contacts = () => {\n//   const location = useLocation();\n//   const params = new URLSearchParams(location.search);\n//   const category = params.get('category');\n\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n//   const [newContact, setNewContact] = useState({\n//     name: '',\n//     avatar: '',\n//     email: '',\n//     contact: ''\n//   });\n//   const [contacts, setContacts] = useState([]);\n\n//   // Fetch contacts from the server on load and whenever category changes\n//   useEffect(() => {\n//     const fetchContacts = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:5000/api/contacts?category=${category}`);\n//         setContacts(response.data);\n//       } catch (error) {\n//         console.error('Error fetching contacts:', error);\n//       }\n//     };\n//     fetchContacts();\n//   }, [category]);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewContact({ ...newContact, [name]: value });\n//   };\n\n//   const handleAddContact = () => {\n//     if (!newContact.name || !newContact.avatar) {\n//       alert('Please fill in the required fields.');\n//       return;\n//     }\n\n//     axios.post('http://localhost:5000/api/contacts', newContact)\n//       .then(response => {\n//         setContacts([...contacts, response.data]); // Update contacts with newly added contact\n//         setIsModalOpen(false);\n//       })\n//       .catch(error => {\n//         console.error('There was an error adding the contact!', error);\n//       });\n//   };\n\n//   return (\n//     <>\n//       <header className=\"header\">\n//         <div className=\"logo\">PeoplePixel</div>\n//         <input type=\"text\" placeholder=\"Search...\" className=\"search-bar\" />\n//         <div className=\"profile-icon\">\n//           <i className=\"bi bi-person-circle\"></i>\n//         </div>\n//       </header>\n//       <h2>\n//         <button className=\"back-button\" onClick={() => window.history.back()}>← Contacts</button>\n//       </h2>\n//       <h3>\n//         <button className=\"add-contact\" onClick={() => setIsModalOpen(true)}>\n//           Add Contact\n//         </button>\n//       </h3>\n//       <div className=\"container\">\n//         {contacts.length > 0 ? (\n//           contacts.map((contact, index) => (\n//             <Link\n//               key={index}\n//               className=\"card\"\n//               to={`/contact?name=${contact.name}&avatar=${contact.avatar}`}\n//             >\n//               <div className=\"avatar\">{contact.avatar}</div>\n//               <p className=\"name\">{contact.name}</p>\n//             </Link>\n//           ))\n//         ) : (\n//           <p className=\"no-contacts\">No contacts found for this category.</p>\n//         )}\n//       </div>\n\n//       {isModalOpen && (\n//         <div className=\"modal\">\n//           <div className=\"modal-content\">\n//             <h2>Add New Contact</h2>\n//             <form>\n//               <label>Name:</label>\n//               <input type=\"text\" name=\"name\" value={newContact.name} onChange={handleInputChange} required />\n//               <label>Avatar:</label>\n//               <input type=\"text\" name=\"avatar\" value={newContact.avatar} onChange={handleInputChange} required />\n//               <label>Email:</label>\n//               <input type=\"email\" name=\"email\" value={newContact.email} onChange={handleInputChange} />\n//               <label>Contact:</label>\n//               <input type=\"text\" name=\"contact\" value={newContact.contact} onChange={handleInputChange} />\n//             </form>\n//             <button onClick={handleAddContact}>Save</button>\n//             <button onClick={() => setIsModalOpen(false)}>Cancel</button>\n//           </div>\n//         </div>\n//       )}\n\n//       <footer>\n//         <div className=\"footer-links\">\n//           <a href=\"#\">About</a>\n//           <a href=\"#\">Help</a>\n//           <a href=\"#\">Privacy Policy</a>\n//         </div>\n//         <p className=\"copyright\">&copy; 2024 PeoplePixel. All rights reserved.</p>\n//       </footer>\n//     </>\n//   );\n// };\n\n// export default Contacts;\n\n// src/Contacts.js\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, Link } from 'react-router-dom';\nimport './styles.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Contacts = () => {\n  _s();\n  const location = useLocation();\n  const params = new URLSearchParams(location.search);\n  const category = params.get('category');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [newContact, setNewContact] = useState({\n    name: '',\n    avatar: '',\n    category: category // Automatically set category based on URL param\n  });\n  const [contacts, setContacts] = useState([]);\n\n  // Fetch contacts by category\n  useEffect(() => {\n    const fetchContacts = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/api/contacts?category=${category}`);\n        setContacts(response.data);\n      } catch (error) {\n        console.error('Error fetching contacts:', error);\n      }\n    };\n    fetchContacts();\n  }, [category]);\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setNewContact({\n      ...newContact,\n      [name]: value\n    });\n  };\n  const handleAddContact = async () => {\n    if (!newContact.name) {\n      alert('Please enter a name for the contact.');\n      return;\n    }\n    try {\n      const response = await axios.post('http://localhost:5000/api/contacts', newContact);\n      setContacts([...contacts, response.data]);\n      setIsModalOpen(false);\n    } catch (error) {\n      console.error('Error adding contact:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: [\"PeoplePixel - \", category]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: () => window.history.back(),\n        children: \"\\u2190 Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"add-contact\",\n        onClick: () => setIsModalOpen(true),\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: contacts.length > 0 ? contacts.map((contact, index) => /*#__PURE__*/_jsxDEV(Link, {\n        className: \"card\",\n        to: `/contact?name=${contact.name}&avatar=${contact.avatar}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"avatar\",\n          children: contact.avatar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"name\",\n          children: contact.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No contacts found for this category.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Add New Contact\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"name\",\n            value: newContact.name,\n            onChange: handleInputChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Avatar:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"avatar\",\n            value: newContact.avatar,\n            onChange: handleInputChange,\n            maxLength: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddContact,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsModalOpen(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Contacts, \"5ZFypLBhCBHAEMR0ronbTdn92nM=\", false, function () {\n  return [useLocation];\n});\n_c = Contacts;\nexport default Contacts;\nvar _c;\n$RefreshReg$(_c, \"Contacts\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","Link","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Contacts","_s","location","params","URLSearchParams","search","category","get","isModalOpen","setIsModalOpen","newContact","setNewContact","name","avatar","contacts","setContacts","fetchContacts","response","data","error","console","handleInputChange","e","value","target","handleAddContact","alert","post","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","window","history","back","length","map","contact","index","to","type","onChange","required","maxLength","_c","$RefreshReg$"],"sources":["D:/PeoplePixel1/src/Contacts.js"],"sourcesContent":["\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useLocation, Link } from 'react-router-dom';\r\n// import axios from 'axios';\r\n// import './styles.css';\r\n\r\n// function Contacts() {\r\n//   const location = useLocation();\r\n//   const params = new URLSearchParams(location.search);\r\n//   const category = params.get('category');\r\n//   const [contacts, setContacts] = useState([]);\r\n//   const [newContactName, setNewContactName] = useState('');\r\n//   const [newContactAvatar, setNewContactAvatar] = useState('');\r\n//   const [showForm, setShowForm] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     const fetchContacts = async () => {\r\n//       try {\r\n//         const response = await axios.get('http://localhost:5000/api/contacts');\r\n//         setContacts(response.data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching contacts:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchContacts();\r\n//   }, []);\r\n\r\n//   const handleAddContact = async () => {\r\n//     try {\r\n//       const newContact = { name: newContactName, avatar: newContactAvatar };\r\n//       const response = await axios.post('http://localhost:5000/api/contacts', newContact);\r\n//       setContacts([...contacts, response.data]); // Update contacts state\r\n//       setNewContactName('');\r\n//       setNewContactAvatar('');\r\n//       setShowForm(false); // Hide the form after submission\r\n//     } catch (error) {\r\n//       console.error('Error adding contact:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <button onClick={() => setShowForm(!showForm)}>\r\n//         {showForm ? 'Cancel' : 'Create New Contact'}\r\n//       </button>\r\n\r\n//       {showForm && (\r\n//         <div className=\"new-contact-form\">\r\n//           <input\r\n//             type=\"text\"\r\n//             placeholder=\"Contact Name\"\r\n//             value={newContactName}\r\n//             onChange={(e) => setNewContactName(e.target.value)}\r\n//           />\r\n//           <input\r\n//             type=\"text\"\r\n//             placeholder=\"Avatar URL\"\r\n//             value={newContactAvatar}\r\n//             onChange={(e) => setNewContactAvatar(e.target.value)}\r\n//           />\r\n//           <button onClick={handleAddContact}>Save Contact</button>\r\n//         </div>\r\n//       )}\r\n\r\n//       <div className=\"container\">\r\n//         {contacts.length > 0 ? (\r\n//           contacts.map((contact, index) => (\r\n//             <Link\r\n//               key={index}\r\n//               className=\"card\"\r\n//               to={`/contact?name=${contact.name}&avatar=${contact.avatar}`}\r\n//             >\r\n//               <div className=\"avatar\">{contact.avatar}</div>\r\n//               <p className=\"name\">{contact.name}</p>\r\n//             </Link>\r\n//           ))\r\n//         ) : (\r\n//           <p className=\"no-contacts\">No contacts found for this category.</p>\r\n//         )}\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default Contacts;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // src/Contacts.js\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useLocation, Link } from 'react-router-dom';\r\n// import './styles.css';\r\n// import axios from 'axios';\r\n\r\n// const Contacts = () => {\r\n//   const location = useLocation();\r\n//   const params = new URLSearchParams(location.search);\r\n//   const category = params.get('category');\r\n\r\n//   const [isModalOpen, setIsModalOpen] = useState(false);\r\n//   const [newContact, setNewContact] = useState({\r\n//     name: '',\r\n//     avatar: '',\r\n//     email: '',\r\n//     contact: ''\r\n//   });\r\n//   const [contacts, setContacts] = useState([]);\r\n\r\n//   // Fetch initial contacts\r\n//   useEffect(() => {\r\n//     // Replace with API call if fetching from server\r\n//     setContacts(contacts[category] || []);\r\n//   }, [category]);\r\n\r\n//   const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setNewContact({ ...newContact, [name]: value });\r\n//   };\r\n\r\n//   const handleAddContact = () => {\r\n//     if (!newContact.name || !newContact.avatar) {\r\n//       alert('Please fill in the required fields.');\r\n//       return;\r\n//     }\r\n\r\n//     // Replace with your backend endpoint\r\n//     axios.post('http://localhost:5000/api/contacts', newContact)\r\n//       .then(response => {\r\n//         console.log('Contact added:', response.data);\r\n//         setContacts([...contacts, newContact]);\r\n//         setIsModalOpen(false);\r\n//       })\r\n//       .catch(error => {\r\n//         console.error('There was an error adding the contact!', error);\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <header className=\"header\">\r\n//         <div className=\"logo\">PeoplePixel</div>\r\n//         <input type=\"text\" placeholder=\"Search...\" className=\"search-bar\" />\r\n//         <div className=\"profile-icon\">\r\n//           <i className=\"bi bi-person-circle\"></i>\r\n//         </div>\r\n//       </header>\r\n//       <h2>\r\n//         <button className=\"back-button\" onClick={() => window.history.back()}>← Contacts</button>\r\n//       </h2>\r\n//       <h3>\r\n//         <button className=\"add-contact\" onClick={() => {\r\n//           setIsModalOpen(true);\r\n//           console.log('Add Contact button clicked'); // Debugging line\r\n//         }}>\r\n//           Add Contact\r\n//         </button>\r\n//       </h3>\r\n//       <div className=\"container\">\r\n//         {contacts.length > 0 ? (\r\n//           contacts.map((contact, index) => (\r\n//             <Link\r\n//               key={index}\r\n//               className=\"card\"\r\n//               to={`/contact?name=${contact.name}&avatar=${contact.avatar}`}\r\n//             >\r\n//               <div className=\"avatar\">{contact.avatar}</div>\r\n//               <p className=\"name\">{contact.name}</p>\r\n//             </Link>\r\n//           ))\r\n//         ) : (\r\n//           <p className=\"no-contacts\">No contacts found for this category.</p>\r\n//         )}\r\n//       </div>\r\n\r\n//       {isModalOpen && (\r\n//         <div className=\"modal\">\r\n//           <div className=\"modal-content\">\r\n//             <h2>Add New Contact</h2>\r\n//             <form>\r\n//               <label>Name:</label>\r\n//               <input type=\"text\" name=\"name\" value={newContact.name} onChange={handleInputChange} required />\r\n//               <label>Avatar:</label>\r\n//               <input type=\"text\" name=\"avatar\" value={newContact.avatar} onChange={handleInputChange} required />\r\n//               <label>Email:</label>\r\n//               <input type=\"email\" name=\"email\" value={newContact.email} onChange={handleInputChange} />\r\n//               <label>Contact:</label>\r\n//               <input type=\"text\" name=\"contact\" value={newContact.contact} onChange={handleInputChange} />\r\n//             </form>\r\n//             <button onClick={handleAddContact}>Save</button>\r\n//             <button onClick={() => {\r\n//               setIsModalOpen(false);\r\n//               console.log('Modal closed'); // Debugging line\r\n//             }}>Cancel</button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       <footer>\r\n//         <div className=\"footer-links\">\r\n//           <a href=\"#\">About</a>\r\n//           <a href=\"#\">Help</a>\r\n//           <a href=\"#\">Privacy Policy</a>\r\n//         </div>\r\n//         <p className=\"copyright\">&copy; 2024 PeoplePixel. All rights reserved.</p>\r\n//       </footer>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Contacts;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // src/Contacts.js\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useLocation, Link } from 'react-router-dom';\r\n// import './styles.css';\r\n// import axios from 'axios';\r\n\r\n// const Contacts = () => {\r\n//   const location = useLocation();\r\n//   const params = new URLSearchParams(location.search);\r\n//   const category = params.get('category');\r\n\r\n//   const [isModalOpen, setIsModalOpen] = useState(false);\r\n//   const [newContact, setNewContact] = useState({\r\n//     name: '',\r\n//     avatar: '',\r\n//     email: '',\r\n//     contact: ''\r\n//   });\r\n//   const [contacts, setContacts] = useState([]);\r\n\r\n//   // Fetch contacts from the server on load and whenever category changes\r\n//   useEffect(() => {\r\n//     const fetchContacts = async () => {\r\n//       try {\r\n//         const response = await axios.get(`http://localhost:5000/api/contacts?category=${category}`);\r\n//         setContacts(response.data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching contacts:', error);\r\n//       }\r\n//     };\r\n//     fetchContacts();\r\n//   }, [category]);\r\n\r\n//   const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setNewContact({ ...newContact, [name]: value });\r\n//   };\r\n\r\n//   const handleAddContact = () => {\r\n//     if (!newContact.name || !newContact.avatar) {\r\n//       alert('Please fill in the required fields.');\r\n//       return;\r\n//     }\r\n\r\n//     axios.post('http://localhost:5000/api/contacts', newContact)\r\n//       .then(response => {\r\n//         setContacts([...contacts, response.data]); // Update contacts with newly added contact\r\n//         setIsModalOpen(false);\r\n//       })\r\n//       .catch(error => {\r\n//         console.error('There was an error adding the contact!', error);\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <header className=\"header\">\r\n//         <div className=\"logo\">PeoplePixel</div>\r\n//         <input type=\"text\" placeholder=\"Search...\" className=\"search-bar\" />\r\n//         <div className=\"profile-icon\">\r\n//           <i className=\"bi bi-person-circle\"></i>\r\n//         </div>\r\n//       </header>\r\n//       <h2>\r\n//         <button className=\"back-button\" onClick={() => window.history.back()}>← Contacts</button>\r\n//       </h2>\r\n//       <h3>\r\n//         <button className=\"add-contact\" onClick={() => setIsModalOpen(true)}>\r\n//           Add Contact\r\n//         </button>\r\n//       </h3>\r\n//       <div className=\"container\">\r\n//         {contacts.length > 0 ? (\r\n//           contacts.map((contact, index) => (\r\n//             <Link\r\n//               key={index}\r\n//               className=\"card\"\r\n//               to={`/contact?name=${contact.name}&avatar=${contact.avatar}`}\r\n//             >\r\n//               <div className=\"avatar\">{contact.avatar}</div>\r\n//               <p className=\"name\">{contact.name}</p>\r\n//             </Link>\r\n//           ))\r\n//         ) : (\r\n//           <p className=\"no-contacts\">No contacts found for this category.</p>\r\n//         )}\r\n//       </div>\r\n\r\n//       {isModalOpen && (\r\n//         <div className=\"modal\">\r\n//           <div className=\"modal-content\">\r\n//             <h2>Add New Contact</h2>\r\n//             <form>\r\n//               <label>Name:</label>\r\n//               <input type=\"text\" name=\"name\" value={newContact.name} onChange={handleInputChange} required />\r\n//               <label>Avatar:</label>\r\n//               <input type=\"text\" name=\"avatar\" value={newContact.avatar} onChange={handleInputChange} required />\r\n//               <label>Email:</label>\r\n//               <input type=\"email\" name=\"email\" value={newContact.email} onChange={handleInputChange} />\r\n//               <label>Contact:</label>\r\n//               <input type=\"text\" name=\"contact\" value={newContact.contact} onChange={handleInputChange} />\r\n//             </form>\r\n//             <button onClick={handleAddContact}>Save</button>\r\n//             <button onClick={() => setIsModalOpen(false)}>Cancel</button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       <footer>\r\n//         <div className=\"footer-links\">\r\n//           <a href=\"#\">About</a>\r\n//           <a href=\"#\">Help</a>\r\n//           <a href=\"#\">Privacy Policy</a>\r\n//         </div>\r\n//         <p className=\"copyright\">&copy; 2024 PeoplePixel. All rights reserved.</p>\r\n//       </footer>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Contacts;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// src/Contacts.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useLocation, Link } from 'react-router-dom';\r\nimport './styles.css';\r\nimport axios from 'axios';\r\n\r\nconst Contacts = () => {\r\n  const location = useLocation();\r\n  const params = new URLSearchParams(location.search);\r\n  const category = params.get('category');\r\n\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [newContact, setNewContact] = useState({\r\n    name: '',\r\n    avatar: '',\r\n    category: category, // Automatically set category based on URL param\r\n  });\r\n  const [contacts, setContacts] = useState([]);\r\n\r\n  // Fetch contacts by category\r\n  useEffect(() => {\r\n    const fetchContacts = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:5000/api/contacts?category=${category}`);\r\n        setContacts(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching contacts:', error);\r\n      }\r\n    };\r\n    fetchContacts();\r\n  }, [category]);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setNewContact({ ...newContact, [name]: value });\r\n  };\r\n\r\n  const handleAddContact = async () => {\r\n    if (!newContact.name) {\r\n      alert('Please enter a name for the contact.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/contacts', newContact);\r\n      setContacts([...contacts, response.data]);\r\n      setIsModalOpen(false);\r\n    } catch (error) {\r\n      console.error('Error adding contact:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <header className=\"header\">\r\n        <div className=\"logo\">PeoplePixel - {category}</div>\r\n        <button className=\"back-button\" onClick={() => window.history.back()}>← Back</button>\r\n        <button className=\"add-contact\" onClick={() => setIsModalOpen(true)}>Add Contact</button>\r\n      </header>\r\n\r\n      <div className=\"container\">\r\n        {contacts.length > 0 ? (\r\n          contacts.map((contact, index) => (\r\n            <Link\r\n              key={index}\r\n              className=\"card\"\r\n              to={`/contact?name=${contact.name}&avatar=${contact.avatar}`}\r\n            >\r\n              <div className=\"avatar\">{contact.avatar}</div>\r\n              <p className=\"name\">{contact.name}</p>\r\n            </Link>\r\n          ))\r\n        ) : (\r\n          <p>No contacts found for this category.</p>\r\n        )}\r\n      </div>\r\n\r\n      {isModalOpen && (\r\n        <div className=\"modal\">\r\n          <div className=\"modal-content\">\r\n            <h2>Add New Contact</h2>\r\n            <form>\r\n              <label>Name:</label>\r\n              <input type=\"text\" name=\"name\" value={newContact.name} onChange={handleInputChange} required />\r\n              <label>Avatar:</label>\r\n              <input type=\"text\" name=\"avatar\" value={newContact.avatar} onChange={handleInputChange} maxLength=\"1\" />\r\n            </form>\r\n            <button onClick={handleAddContact}>Save</button>\r\n            <button onClick={() => setIsModalOpen(false)}>Cancel</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Contacts;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}